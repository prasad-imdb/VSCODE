SELECT ADD_DAYS (TO_DATE ('2009-12-05', 'YYYY-MM-DD'), 30) "add days" FROM DUMMY;
SELECT ADD_MONTHS (TO_DATE ('2009-12-05', 'YYYY-MM-DD'), 1) "add months" FROM DUMMY;
SELECT ADD_MONTHS_LAST (TO_DATE ('2009-02-28', 'YYYY-MM-DD'), 1) "add months last" FROM DUMMY;-- returns 2009-03-31, (the last day of March).


SELECT CAST (7 AS VARCHAR) "cast" FROM DUMMY;
SELECT CAST (10.5 AS INTEGER) "cast" FROM DUMMY;


SELECT CEIL (14.5) "ceiling" FROM DUMMY;
SELECT FLOOR (14.5) "floor" FROM DUMMY;
SELECT ROUND (16.16, 1) "round" FROM DUMMY;
SELECT ROUND(TO_REAL(399.71429443359375),2) from DUMMY;
SELECT ROUND( 438.75, 1, ROUND_HALF_UP) "round" FROM DUMMY;
SELECT ROUND( 438.79, 1, ROUND_DOWN) "round" FROM DUMMY;


CREATE ROW TABLE coalesce_example (ID INT PRIMARY KEY, A REAL, B REAL);
 INSERT INTO coalesce_example VALUES(1, 100, 80);
 INSERT INTO coalesce_example VALUES(2, NULL, 63);
 INSERT INTO coalesce_example VALUES(3, NULL, NULL);

 SELECT id, a, b, COALESCE (a, b*1.1, 50.0) "coalesce" FROM coalesce_example;

SELECT CURRENT_TIME "current time" FROM DUMMY;

SELECT DAYNAME ('2011-05-30') "dayname" FROM DUMMY;
SELECT DAYOFMONTH ('2011-05-30') "dayofmonth" FROM DUMMY;
SELECT DAYOFYEAR ('2011-05-30') "dayofyear" FROM DUMMY;


SELECT DAYS_BETWEEN (TO_DATE ('2009-12-05', 'YYYY-MM-DD'), TO_DATE('2010-01-05', 'YYYY-MM-DD')) "days between" FROM DUMMY;
SELECT DAYS_BETWEEN('2018-02-07 23:00:00',  '2018-02-08 01:00:00') AS sinceDays FROM dummy;
SELECT DAYS_BETWEEN('2018-02-07 23:00:00',  '2018-02-08 23:00:00') AS sinceDays FROM dummy;



EXTRACT ({YEAR | MONTH | DAY | HOUR | MINUTE | SECOND} FROM <d>)
SELECT EXTRACT (YEAR FROM TO_DATE ('2010-01-04', 'YYYY-MM-DD')) "extract" FROM DUMMY;


CREATE ROW TABLE T (COL1 DOUBLE, COL2 DOUBLE);

INSERT INTO T VALUES(9, 1);
INSERT INTO T VALUES(4, 5);
INSERT INTO T VALUES(7, 3);

SELECT FIRST_VALUE (COL1 ORDER BY COL2) FROM T;

CREATE ROW TABLE T (COL1 DOUBLE, COL2 DOUBLE);

INSERT INTO T VALUES(1, 1);
INSERT INTO T VALUES(4, 5);
INSERT INTO T VALUES(7, 3);

SELECT LAST_VALUE (COL1 ORDER BY COL2) FROM T;


CREATE ROW TABLE T (COL1 DOUBLE, COL2 DOUBLE);
INSERT INTO T VALUES(900, 10);
INSERT INTO T VALUES(400, 50);
INSERT INTO T VALUES(700, 30);
INSERT INTO T VALUES(200, 40);

SELECT NTH_VALUE (COL1, 2 ORDER BY COL2) FROM T;

-----------------------------------------------------------------------------
grouping:

CREATE COLUMN TABLE mySchema.Customers (
 cust_id INTEGER NOT NULL,
 cust_name NVARCHAR(20),
 num_emp INTEGER,
 region NVARCHAR(20),
 s_tier NVARCHAR(20),
 PRIMARY KEY ("CUST_ID")
 );
 
INSERT INTO mySchema.Customers VALUES( 1, 'CustA', 5, 'NorthEast', 'gold' );
INSERT INTO mySchema.Customers VALUES( 2, 'CustB', 26, 'NorthWest', 'gold' );
INSERT INTO mySchema.Customers VALUES( 3, 'CustC', 250, 'NorthEast', 'silver' );
INSERT INTO mySchema.Customers VALUES( 4, 'CustD', 180, 'SouthEast', 'platinum' );
INSERT INTO mySchema.Customers VALUES( 5, 'CustE', 32, 'SouthWest', 'silver' );
INSERT INTO mySchema.Customers VALUES( 6, 'CustF', 45, 'NorthEast', 'platinum' );
INSERT INTO mySchema.Customers VALUES( 7, 'CustG', 15, 'NorthWest', 'platinum' );
INSERT INTO mySchema.Customers VALUES( 8, 'CustH', 99, 'SouthEast', 'gold' );
INSERT INTO mySchema.Customers VALUES( 9, 'CustI', 6, 'NorthEast', 'silver' );
INSERT INTO mySchema.Customers VALUES( 10,'CustJ', 101, 'NorthEast', 'silver' );
INSERT INTO mySchema.Customers VALUES( 11,'Custk', 108, 'SouthEast', 'silver' );

SELECT cust_name AS "cust_name", cust_id AS "cust_id", region AS "region", s_tier AS "s_tier", num_emp AS "num_emp", 
GROUPING (region) AS "gr_reg", GROUPING (s_tier) AS "gr_tier", GROUPING (num_emp) AS "gr_num"
FROM mySchema.Customers
GROUP BY GROUPING SETS (
	(s_tier, region), 
	(region, s_tier), 
	(cust_id, cust_name, num_emp)
);

------------------------------------------------------------------------------
SELECT IFNULL ('diff', 'same') "ifnull" FROM DUMMY;
SELECT IFNULL (NULL, 'same') "ifnull" FROM DUMMY;
SELECT IFNULL (NULL, NULL) "ifnull" FROM DUMMY;
SELECT INITCAP('the EXAMPLE one') FROM DUMMY;

SELECT LAST_DAY (TO_DATE('2010-01-04', 'YYYY-MM-DD')) "last day" FROM DUMMY;

SELECT NULLIF ('diff', 'same') "nullif" FROM DUMMY;

SELECT NULLIF('same', 'same') "nullif" FROM DUMMY;

SELECT QUARTER (TO_DATE('2012-01-01', 'YYYY-MM-DD'), 2) "quarter" FROM DUMMY;

SELECT REPLACE ('DOWNGRADE DOWNWARD','DOWN', 'UP') "replace" FROM DUMMY;

CREATE COLUMN TABLE T (CONTENT TEXT FAST PREPROCESS OFF);
 INSERT INTO T VALUES('This is a test.');
 INSERT INTO T VALUES('This was a test.');
SELECT SCORE(), CONTENT FROM T WHERE CONTAINS(CONTENT, 'is', LINGUISTIC); 




SELECT SECONDS_BETWEEN ('2009-12-05', '2010-01-05') "seconds between" FROM DUMMY;
SELECT  WEEK (TO_DATE('2011-05-30', 'YYYY-MM-DD')) "week" FROM DUMMY;

ELECT UTCTOLOCAL (TO_TIMESTAMP('2012-01-01 01:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'EST') "utctolocal" FROM DUMMY
SELECT WORKDAYS_BETWEEN('01', '2014-01-09', '2014-01-10' , 'FCTEST') "workdays" FROM DUMMY; 
SELECT WORKDAYS_BETWEEN('01', '2014-01-10', '2014-01-09' , 'FCTEST') "workdays" FROM DUMMY;



CREATE ROW TABLE r1(a INT, str VARCHAR(20), grp INT);

INSERT INTO r1 VALUES (3,'str2',0);
INSERT INTO r1 VALUES (0,'str1',0);
INSERT INTO r1 VALUES (NULL,'NULL',0);
INSERT INTO r1 VALUES (5,'str3',0);
INSERT INTO r1 VALUES (3,'val3',1);
INSERT INTO r1 VALUES (6,'val6',1);
INSERT INTO r1 VALUES (NULL,'NULL',1);
INSERT INTO r1 VALUES (1,'val1',1);
SELECT grp, STRING_AGG(str,','ORDER BY a)AS agg FROM R1 GROUP BY grp;
SELECT grp, STRING_AGG(str,','ORDER BY a DESC) AS agg FROM r1 GROUP BY grp;


WINDOWS FUNCTIONS:


AGGREGATED:
CREATE ROW TABLE T (class CHAR(10), val INT, offset INT);
 INSERT INTO T VALUES('A', 1, 1);
 INSERT INTO T VALUES('A', 3, 3);
 INSERT INTO T VALUES('A', 5, null);
 INSERT INTO T VALUES('A', 5, 2);
 INSERT INTO T VALUES('A', 10, 0);
 INSERT INTO T VALUES('B', 1, 3);
 INSERT INTO T VALUES('B', 1, 1);
 INSERT INTO T VALUES('B', 7, 1);

SELECT class, 
  val, 
  offset,
  COUNT(*) OVER (PARTITION BY class) AS c1,
  COUNT(offset) OVER (PARTITION BY class) AS c2,
  COUNT(*) OVER (PARTITION BY class ORDER BY val) AS c3,
  COUNT(offset) OVER (PARTITION BY class ORDER BY val) AS c4,
  MAX(val) OVER (PARTITION BY class) AS m1,
  MAX(val) OVER (PARTITION BY class ORDER BY val) AS m2
 FROM T;


BINNING:

DROP TABLE weather;
CREATE ROW TABLE weather (station INT, ts DATE, temperature FLOAT);
INSERT INTO weather VALUES(1, '2014-01-01', 0);
INSERT INTO weather VALUES(1, '2014-01-02', 3);
INSERT INTO weather VALUES(1, '2014-01-03', 4.5);
INSERT INTO weather VALUES(1, '2014-01-04', 6);
INSERT INTO weather VALUES(1, '2014-01-05', 6.3);
INSERT INTO weather VALUES(1, '2014-01-06', 5.9);
INSERT INTO weather VALUES(1, '2015-01-01', 1);
INSERT INTO weather VALUES(1, '2015-01-02', 3.4);
INSERT INTO weather VALUES(1, '2015-01-03', 5);
INSERT INTO weather VALUES(1, '2015-01-04', 6.7);
INSERT INTO weather VALUES(1, '2015-01-05', 4.6);
INSERT INTO weather VALUES(1, '2015-01-06', 6.9);

SELECT *, BINNING(VALUE => temperature, BIN_COUNT => 4) OVER () AS bin_num FROM weather;

RANK:

CREATE ROW TABLE T (class CHAR(10), val INT, offset INT);
 INSERT INTO T VALUES('A', 1, 1);
 INSERT INTO T VALUES('A', 3, 3);
 INSERT INTO T VALUES('A', 5, null);
 INSERT INTO T VALUES('A', 5, 2);
 INSERT INTO T VALUES('A', 10, 0);
 INSERT INTO T VALUES('B', 1, 3);
 INSERT INTO T VALUES('B', 1, 1);
 INSERT INTO T VALUES('B', 7, 1);

SELECT class, 
  val,
  ROW_NUMBER() OVER (PARTITION BY class ORDER BY val) AS row_num,
  RANK() OVER (PARTITION BY class ORDER BY val) AS rank,
  DENSE_RANK() OVER (PARTITION BY class ORDER BY val) AS dense_rank
 FROM T;

LAG:
CREATE ROW TABLE T (class CHAR(10), val INT, offset INT);
 INSERT INTO T VALUES('A', 1, 1);
 INSERT INTO T VALUES('A', 3, 3);
 INSERT INTO T VALUES('A', 5, null);
 INSERT INTO T VALUES('A', 5, 2);
 INSERT INTO T VALUES('A', 10, 0);
 INSERT INTO T VALUES('B', 1, 3);
 INSERT INTO T VALUES('B', 1, 1);
 INSERT INTO T VALUES('B', 7, 1);

SELECT class, 
  val, 
  offset,
  LEAD(val) OVER (PARTITION BY class ORDER BY val) AS lead,
  LEAD(val,offset,-val) OVER (PARTITION BY class ORDER BY val) AS lead2,
  LAG(val) OVER (PARTITION BY class ORDER BY val) AS lag,
  LAG(val,offset,-val) OVER (PARTITION BY class ORDER BY val) AS lag2
 FROM T;


CREATE ROW TABLE T (class CHAR(10), val INT, offset INT);
 INSERT INTO T VALUES('A', 1, 1);
 INSERT INTO T VALUES('A', 3, 3);
 INSERT INTO T VALUES('A', 5, null);
 INSERT INTO T VALUES('A', 5, 2);
 INSERT INTO T VALUES('A', 10, 0);
 INSERT INTO T VALUES('B', 1, 3);
 INSERT INTO T VALUES('B', 1, 1);
 INSERT INTO T VALUES('B', 7, 1);

SELECT class, 
  val, 
  offset,
  LEAD(val) OVER (PARTITION BY class ORDER BY val) AS lead,
  LEAD(val, offset, -val) OVER (PARTITION BY class ORDER BY val) AS lead2,
  LAG(val) OVER (PARTITION BY class ORDER BY val) AS lag,
  LAG(val, offset, -val) OVER (PARTITION BY class ORDER BY val) AS lag2
 FROM T;

NTILE:


CREATE ROW TABLE T (class CHAR(10), val INT, offset INT);
 INSERT INTO T VALUES('A', 1, 1);
 INSERT INTO T VALUES('A', 3, 3);
 INSERT INTO T VALUES('A', 5, null);
 INSERT INTO T VALUES('A', 5, 2);
 INSERT INTO T VALUES('A', 10, 0);
 INSERT INTO T VALUES('B', 1, 3);
 INSERT INTO T VALUES('B', 1, 1);
 INSERT INTO T VALUES('B', 7, 1);

SELECT class, val,
  NTILE(3) OVER (PARTITION BY class ORDER BY val) AS NTILE,
  FIRST_VALUE(val) OVER (PARTITION BY class ORDER BY val) AS first,
  LAST_VALUE(val) OVER (PARTITION BY class ORDER BY val) AS last,
  NTH_VALUE(val, 4) OVER (PARTITION BY class ORDER BY val) AS nth
 FROM T;




PERCENT_RANK:
CREATE ROW TABLE ProductSales(ProdName VARCHAR(50), Type VARCHAR(20), Sales INT);
INSERT INTO ProductSales VALUES('Tee Shirt','Plain',21);
INSERT INTO ProductSales VALUES('Tee Shirt','Lettered',22);
INSERT INTO ProductSales VALUES('Tee Shirt','Team logo',30);
INSERT INTO ProductSales VALUES('Hoodie','Plain',60);
INSERT INTO ProductSales VALUES('Hoodie','Lettered',65);
INSERT INTO ProductSales VALUES('Hoodie','Team logo',80);
INSERT INTO ProductSales VALUES('Hoodie','Vintage',67);
INSERT INTO ProductSales VALUES('Ballcap','Plain',8);
INSERT INTO ProductSales VALUES('Ballcap','Lettered',40);
INSERT INTO ProductSales VALUES('Ballcap','Team logo',27);

SELECT ProdName, Type, Sales,
  PERCENT_RANK() OVER (PARTITION BY ProdName ORDER BY Sales ASC) AS Percent_Rank
FROM ProductSales
ORDER BY Sales DESC;

RANDOM_PARTITION:

DROP TABLE weather;
CREATE ROW TABLE weather (station INT, ts DATE, temperature FLOAT);
INSERT INTO weather VALUES(1, '2014-01-01', 0);
INSERT INTO weather VALUES(1, '2014-01-02', 3);
INSERT INTO weather VALUES(1, '2014-01-03', 4.5);
INSERT INTO weather VALUES(1, '2014-01-04', 6);
INSERT INTO weather VALUES(1, '2014-01-05', 6.3);
INSERT INTO weather VALUES(1, '2014-01-06', 5.9);
INSERT INTO weather VALUES(2, '2014-01-01', 1);
INSERT INTO weather VALUES(2, '2014-01-02', 3.4);
INSERT INTO weather VALUES(2, '2014-01-03', 5);
INSERT INTO weather VALUES(2, '2014-01-04', 6.7);
INSERT INTO weather VALUES(2, '2014-01-05', 4.6);
INSERT INTO weather VALUES(2, '2014-01-06', 6.9);

SELECT *, RANDOM_PARTITION(0.5, 0.2, 0.3, 0) OVER (PARTITION BY station) AS part_num FROM weather;

RANK:

CREATE ROW TABLE ProductSales(ProdName VARCHAR(50), Type VARCHAR(20), Sales INT);
INSERT INTO ProductSales VALUES('Tee Shirt','Plain',21);
INSERT INTO ProductSales VALUES('Tee Shirt','Lettered',22);
INSERT INTO ProductSales VALUES('Tee Shirt','Team logo',30);
INSERT INTO ProductSales VALUES('Hoodie','Plain',60);
INSERT INTO ProductSales VALUES('Hoodie','Lettered',65);
INSERT INTO ProductSales VALUES('Hoodie','Team logo',80);
INSERT INTO ProductSales VALUES('Ballcap','Vintage',60);
INSERT INTO ProductSales VALUES('Ballcap','Plain',8);
INSERT INTO ProductSales VALUES('Ballcap','Lettered',40);
INSERT INTO ProductSales VALUES('Ballcap','Team logo',40);

SELECT ProdName, Type, Sales,
RANK() OVER ( PARTITION BY ProdName ORDER BY Sales DESC ) AS Rank
FROM ProductSales
ORDER BY ProdName, Type;

ROW_NUMBER:

CREATE ROW TABLE ProductSales(ProdName VARCHAR(50), Type VARCHAR(20), Sales INT);
INSERT INTO ProductSales VALUES('Tee Shirt','Plain',21);
INSERT INTO ProductSales VALUES ('Tee Shirt','Lettered',22);
INSERT INTO ProductSales VALUES ('Tee Shirt','Team logo',30);
INSERT INTO ProductSales VALUES('Hoodie','Plain',60);
INSERT INTO ProductSales VALUES ('Hoodie','Lettered',65);
INSERT INTO ProductSales VALUES ('Hoodie','Team logo',80);
INSERT INTO ProductSales VALUES('Ballcap','Plain',8);
INSERT INTO ProductSales VALUES ('Ballcap','Lettered',40);
INSERT INTO ProductSales VALUES ('Ballcap','Team logo',27);

SELECT ProdName, Type, Sales,
  ROW_NUMBER() OVER (PARTITION BY ProdName ORDER BY Sales DESC) AS row_num
FROM ProductSales
ORDER BY ProdName, Sales DESC;