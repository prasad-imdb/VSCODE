1) employ and manager 
CREATE OR REPLACE TABLE PRASAD.SCHEMA.EMPLOYEES (
  EMPNO INTEGER,
  ENAME NVARCHAR(255),
  JOB  NVARCHAR(255),
  MGR INTEGER,
  HIREDATE DATE,
  SALARY DECIMAL(10,2),
  COMM DECIMAL(10,2),
  DEPTNO INTEGER
);

INSERT INTO PRASAD.SCHEMA.EMPLOYEES (EMPNO, ENAME, JOB, MGR, HIREDATE, SALARY, COMM, DEPTNO) 
VALUES (NULL,'ANIK','DATA ENGG',2000,'2017-01-05',2800,100,NULL);

CREATE OR REPLACE TABLE PRASAD.SCHEMA.DEPT (
  DEPTNO INTEGER,
  NAME NVARCHAR(255),
  COUNTRY NVARCHAR(255)
);

INSERT INTO PRASAD.SCHEMA.DEPT (DEPTNO,NAME,COUNTRY)
VALUES (NULL,'CUST SUPPORT','INDIA');

select * from emp;

EMPNO	ENAME	JOB			MGR	HIREDATE	SAL	COMM	DEPTNO
7773	PRASAD	DATA ENGG		2000	11/4/2016	2800	100	2501
7723	VIJAY	DATA ENGG		2000	11/5/2017	2000	70	2501
7001	RAJEEVI	ANALYST			2000	11/6/2016	2000	100	2501
2000	BALU	PRINCIPAL DATA ENGG	4000	11/7/2016	4000	200	2501
4000	RAJEEV	MANAGER			1000	11/8/2016	5000	76	2500
1000	VIJAY KOTU	SR MANAGER	200	11/9/2016	6000	200	2500
7012	PADMA	DEVELOPER		3000	11/10/2016	2600	50	2502
8012	HASIN	DEVELOPER		3000	11/11/2016	2000	80	2502
5345	GIRISH	DEVELOPER		3000	11/12/2016	2000	56	2502
3000	VIVEK	MANAGER			4000	11/13/2016	3000	200	2502
6508	ARCHIT	DEVELOPER		3000	11/14/2016	2300	80	2502
7023	JOANE	ANALYST			2000	11/15/2016	2100	68	2501
8012	SURI 	DESIGNER		4000	11/16/2016	2100	80	2502
200	CHRIS	CFO						8000	1000	2500


--To get all employees with managers
> 
SELECT  e.EMPNO,e.ENAME,e.DEPTNO,e.MGR,m.ename as MGR_NAME 
FROM PRASAD.SCHEMA.EMPLOYEES e
LEFT JOIN PRASAD.SCHEMA.EMPLOYEES m
on e.MGR= m.EMPNO;


--- one more sol
SELECT e.EMPNO,e.ENAME,e.DEPTNO,e.MGR,
(select ENAME FROM PRASAD.SCHEMA.EMPLOYEES WHERE EMPNO = e.MGR ) as MGR_NAME  
FROM PRASAD.SCHEMA.EMPLOYEES e;


--if u use below it wont get the employee who diesnt have manager
--with out where it works as cross join 
--FULL OUTER JOIN its result set is equivalent to performing a UNION of the results of left and right outer queries

> SELECT e.EMPNO,e.ENAME,e.DEPTNO,e.MGR,m.ename as MGR_NAME  
FROM PRASAD.SCHEMA.EMPLOYEES e, PRASAD.SCHEMA.EMPLOYEES m
WHERE e.MGR = m.EMPNO;


2) HIGHEST NTH SALARY 

  select EMPNO,ENAME,SALARY from PRASAD.SCHEMA.EMPLOYEES
  ORDER BY SALARY DESC;
  --2nd Highest salary employees
  SELECT * FROM PRASAD.SCHEMA.EMPLOYEES WHERE 
  SALARY = (
  SELECT DISTINCT SALARY FROM PRASAD.SCHEMA.EMPLOYEES
  ORDER BY SALARY DESC
  LIMIT 1 OFFSET 1)
  ;

  --5th Highest salary employees
  SELECT * FROM PRASAD.SCHEMA.EMPLOYEES WHERE 
  SALARY = (
  SELECT DISTINCT SALARY FROM PRASAD.SCHEMA.EMPLOYEES
  ORDER BY SALARY DESC
  LIMIT 1 OFFSET 4)
  ;

3) NOT IN With NULLS

sql> SELECT * FROM runners;
+----+--------------+
| id | name         |
+----+--------------+
|  1 | John Doe     |
|  2 | Jane Doe     |
|  3 | Alice Jones  |
|  4 | Bobby Louis  |
|  5 | Lisa Romero  |
+----+--------------+

sql> SELECT * FROM races;
+----+----------------+-----------+
| id | event          | winner_id |
+----+----------------+-----------+
|  1 | 100 meter dash |  2        |
|  2 | 500 meter dash |  3        |
|  3 | cross-country  |  2        |
|  4 | triathalon     |  NULL     |
+----+----------------+-----------+

--it will give empty result set as inner query will give 1,2,null but NOT IN condition contains any values that are null
SELECT * FROM runners WHERE id NOT IN (SELECT winner_id FROM races);

--to get correct results use below
SELECT * FROM runners WHERE id NOT IN (SELECT winner_id FROM races WHERE winner_id IS NOT null);

4) JOIN Issues

create table test_a(id numeric);
create table test_b(id numeric);

insert into test_a(id) values
  (10),
  (20),
  (30),
  (40),
  (50),
  (NULL),
  (NULL);

insert into test_b(id) values 
  (10),
  (30),
  (50),
  (NULL),
  (10),
  (30),
  (50),
  (NULL);

--to fetch records which r not there in table_a
  select id from PRASAD.SCHEMA.TEST_A
  minus
  select id from PRASAD.SCHEMA.TEST_B;

  select * from PRASAD.SCHEMA.TEST_A
  except
  select * from PRASAD.SCHEMA.TEST_B;
--joins count 

select a.*,b.* from PRASAD.SCHEMA.TEST_A a
  INNER join PRASAD.SCHEMA.TEST_B b
  on a.id=b.id;
--count = 6 (10,30,50 twice) (NULLS Wont consider)
  
  select a.*,b.* from PRASAD.SCHEMA.TEST_A a
  LEFT join PRASAD.SCHEMA.TEST_B b
  on a.id=b.id;
--count= 10 ( 10,10,30,30,50,50,20,40,null,null) 

  select a.*,b.* from PRASAD.SCHEMA.TEST_A a
  RIGHT join PRASAD.SCHEMA.TEST_B b
  on a.id=b.id;
--count = 8

5) Instead of UNION we can use UNON ALL With where when it hit the performance 

SELECT * FROM mytable WHERE a=X UNION ALL SELECT * FROM mytable WHERE b=Y AND a!=X


6)group by 

 CREATE OR REPLACE TABLE PRASAD.SCHEMA.USERS (
  ID INTEGER,
  NAME NVARCHAR(255)
);
  
SELECT * FROM PRASAD.SCHEMA.USERS;
INSERT INTO PRASAD.SCHEMA.USERS (ID,NAME)
VALUES (1,'JON');
INSERT INTO PRASAD.SCHEMA.USERS(ID,NAME)
VALUES (2,'JANE');
INSERT INTO PRASAD.SCHEMA.USERS (ID,NAME)
VALUES (3,'ALISE');
INSERT INTO PRASAD.SCHEMA.USERS (ID,NAME)
VALUES (4,'LISA');

  CREATE OR REPLACE TABLE PRASAD.SCHEMA.TRAININGS (
  ID INTEGER,
  USER_ID INTEGER,
  TRAINING_ID INTEGER,
  TRAINING_DATE DATE
);
  
SELECT * FROM PRASAD.SCHEMA.TRAININGS;
INSERT INTO PRASAD.SCHEMA.TRAININGS 
VALUES 
(1,1,1,'2015-08-02'),
(2,2,1,'2015-08-03'),
(3,3,2,'2015-08-02'),
(4,4,2,'2015-08-04'),
(5,2,2,'2015-08-03'),
(6,1,1,'2015-08-02'),
(7,3,2,'2015-08-04'),
(8,4,3,'2015-08-03'),
(9,1,4,'2015-08-03'),
(10,3,1,'2015-08-02'),
(11,4,2,'2015-08-04'),
(12,3,2,'2015-08-02'),
(13,1,1,'2015-08-02'),
(14,4,3,'2015-08-03');

USE WAREHOUSE PRASAD_WH;
select t.USER_ID,u.NAME,t.TRAINING_ID,t.TRAINING_DATE, count(t.ID) 
from PRASAD.SCHEMA.TRAININGS t
LEFT JOIN PRASAD.SCHEMA.USERS u
on t.USER_ID = u.ID 
GROUP BY t.USER_ID,u.NAME,t.TRAINING_ID,t.TRAINING_DATE
HAVING count(t.ID) > 1
ORDER BY t.USER_ID;

7)

Atomicity: Atomicity requires that each transaction be “all or nothing”: if one part of the transaction fails, the entire transaction fails, and the database state is left unchanged. An atomic system must guarantee atomicity in each and every situation, including power failures, errors, and crashes.
Consistency: The consistency property ensures that any transaction will bring the database from one valid state to another. Any data written to the database must be valid according to all defined rules, including constraints, cascades, triggers, and any combination thereof.
Isolation: The isolation property ensures that the concurrent execution of transactions results in a system state that would be obtained if transactions were executed serially, i.e., one after the other. Providing isolation is the main goal of concurrency control. Depending on concurrency control method (i.e. if it uses strict - as opposed to relaxed - serializability), the effects of an incomplete transaction might not even be visible to another transaction.
Durability: Durability means that once a transaction has been committed, it will remain so, even in the event of power loss, crashes, or errors. In a relational database, for instance, once a group of SQL statements execute, the results need to be stored permanently (even if the database crashes immediately thereafter). To defend against power loss, transactions (or their effects) must be recorded in a non-volatile memory.

8) NULLS Handling
 NVL(exp1, exp2) function, if exp1 is not null, then the value of exp1 is returned; otherwise, the value of exp2 is returned, but case to the same data type as that of exp1.

With the NVL2(exp1, exp2, exp3) function, if exp1 is not null, then exp2 is returned; otherwise, the value of exp3 is returned.

9)
To select all the even number records from a table:
Select * from PRASAD.SCHEMA.TRAININGS where id % 2 = 0 ;

To select all the odd number records from a table:
Select * from PRASAD.SCHEMA.TRAININGS where id % 2 != 0 ;

10) dense and rank
   dense_rank rank
1  1 		1
1  1 		1
2  2		3
3  3		4
4  4		5
5  5		6

11) What will be the output of the below query, given an Employee table having 10 records?

BEGIN TRAN
TRUNCATE TABLE Employees
ROLLBACK
SELECT * FROM Employees

--retutn 10 records from employee table (have to COMMIT; END TRANS)

12)
Write an SQL query to display the text CAPONE as:
C
A
P
O
N
E

Declare @a nvarchar(100)='capone';
Declare @length INT;
Declare @i INT=1;
SET @lenght=LEN(@a)
while @i<=@length
BEGIN
print(substring(@a,@i,1));
set @i=@i+1;
END

13) We have EMPLOYEE Table with 17 rows and 

SELECT SUM(1) FROM PRASAD.SCHEMA.EMPLOYEES; -- 17
SELECT SUM(2) FROM PRASAD.SCHEMA.EMPLOYEES; --34
SELECT SUM(3) FROM PRASAD.SCHEMA.EMPLOYEES; --51

14)

ID	C1	C2	C3
1	RED	YELLOW	BLUE
2		RED	GREEN
3	YELLOW		GREEN

SELECT * FROM PRASAD.SCHEMA.COLORS 
WHERE 'YELLOW' IN (C1, C2, C3);

Output:
ID	C1	C2	C3
1	RED	YELLOW	BLUE
2		RED	GREEN
3	YELLOW		GREEN

15)
How do you get the last id without the max function?

select id from table 
order by id desc
limit 1;

select top 1 from table order by id desc;

16)
How can you use a CTE to return the fifth highest (or Nth highest) salary from a table?

with salary as (
select distinct SALARY from PRASAD.SCHEMA.EMPLOYEES
order by SALARY desc
LIMIT 1 OFFSET 4
)
select * from PRASAD.SCHEMA.EMPLOYEES where  SALARY = (select  SALARY from salary );

WITH CTE AS
(
SELECT EMPNO, ENAME,SALARY, DENSE_RANK() OVER (ORDER BY SALARY DESC) AS RN
FROM PRASAD.SCHEMA.EMPLOYEES
)
SELECT EMPNO, ENAME,SALARY
FROM CTE
WHERE RN = 5

--FUNCTION OR PROC 

Declare @N int
set @N = 5;
WITH CTE AS
(
    SELECT Name, Salary, EmpID, RN = ROW_NUMBER() 
	OVER (ORDER BY Salary DESC)
    FROM Employee
)
SELECT Name, Salary, EmpID
FROM CTE
WHERE RN = @N


17)
create table PRASAD.SCHEMA.TEST_SUM(VALUE numeric);

insert into PRASAD.SCHEMA.TEST_SUM(VALUE) values 
  (10),
  (30),
  (50),
  (-20),
   (10),
  (30),
  (-50),
  (-30);

SELECT SUM(IFF(VALUE>0,VALUE,0))AS PSUM,SUM(IFF(VALUE<0,VALUE,0))AS NSUM
FROM PRASAD.SCHEMA.TEST_SUM;

18) average salary under each manager 

select mgr,manager_name,avg(salary) from 
(
select e.empid,e.name,e.salary,e.mgr,m.name manager_name 
from emp e emp m 
where e.mgr = m.empid
)
group by mgr,manager_name 

19) when u use NOT IN or <> it will not consider NULLS
SELECT Name FROM Customers WHERE ReferredBy <> 2;
SELECT Name FROM Customers WHERE ReferredBy <> 2 OR ReferredBy IS NULL;

20)

from, to, distance
BOM, NY, 10000
NY, BOM,10000
NY, DEL, 9950
DEL, NY, 9950
NY, HYD,10000


How to remove duplicate rows?

SELECT * FROM (
select fromtoto,distance,row_number() over (partition by fromandto) as RN from 
(
select from,to,
case when from = 'BOM' and to = 'NY' THEN 'BOM TO NY' 
case when from = 'NY' and to = 'BOM' THEN 'BOM TO NY' 
case when from = 'DEL' and to = 'NY' THEN 'DEL TO NY' 
case when from = 'NY' and to = 'NY' THEN 'DEL TO NY'  
ELSE NULL END AS FROMandTO,distance from table
)
)
WHERE RN = 1

21)
sales:
year,Region, sales
2010,AMERICA,10000
2010,EUROPE,11000
2010,ASIA,12000
2011,AMERICA,1000
2011,EUROPE,11000
2011,ASIA,12000

year, america_sales, europe_sales, asia_sales?

select 
2010 as year,
(select sales from sales where year = 2010 and region = 'AMERICA' FROM sales ) as america_sales,
(select sales from sales where year = 2010 and region = 'europe' FROM sales ) as europe_sales,
(select sales from sales where year = 2010 and region = 'asia' FROM sales ) as asia_sales
from sales 

union 

select 
2011 as year,
(select sales from sales where year = 2011 and region = 'AMERICA' FROM sales ) as america_sales,
(select sales from sales where year = 2011 and region = 'europe' FROM sales ) as europe_sales,
(select sales from sales where year = 2011 and region = 'asia' FROM sales ) as asia_sales
from sales 



---Oracle PDF Questions - solutions

--SELF JOIN 
--Display the employees who have salary grade as 1.
SELECT EMPNO,ENAME FROM "SANTOSH"."EMPLOYEE"."EMP_TABLE"
WHERE SAL = (select max(SAL) FROM "SANTOSH"."EMPLOYEE"."EMP_TABLE");

--Display the employees who work under Jones. 

SELECT * FROM "SANTOSH"."EMPLOYEE"."EMP_TABLE"
WHERE MGR = (SELECT EMPNO FROM "SANTOSH"."EMPLOYEE"."EMP_TABLE"
WHERE ENAME = 'JONES');


--Display the employees who earn more than their managers
SELECT * FROM 
(
SELECT a.*,b.SAL AS MGR_SAL,
CASE WHEN a.SAL > b.SAL THEN 1 ELSE 0 END AS "MORE_EARN_FLAG" 
FROM "SANTOSH"."EMPLOYEE"."EMP_TABLE" a
LEFT JOIN "SANTOSH"."EMPLOYEE"."EMP_TABLE" b
on a.MGR = b.EMPNO
)
WHERE "MORE_EARN_FLAG"  = 1;

--Display empno,ename job,deptno along with matching dname and loc

select a.*,b.DEPT_NAME,b.COUNTRY from "SANTOSH"."EMPLOYEE"."EMP_TABLE" a
left join "SANTOSH"."EMPLOYEE"."DIM_DEPT" b
on a.DEPTNO = b.DEPTNO;

--Display the empno,ename, job,deptno along with matching dname and locand also display that departments details in
--which no employees are working 

SELECT a.*,b.CNT FROM 
(select a.*,b.DEPT_NAME,b.COUNTRY from "SANTOSH"."EMPLOYEE"."EMP_TABLE" a
left join "SANTOSH"."EMPLOYEE"."DIM_DEPT" b
on a.DEPTNO = b.DEPTNO) a
left join 
(SELECT DEPTNO,COUNT(*) as CNT FROM 
(
select a.*,b.DEPT_NAME,b.COUNTRY from "SANTOSH"."EMPLOYEE"."EMP_TABLE" a
left join "SANTOSH"."EMPLOYEE"."DIM_DEPT" b
on a.DEPTNO = b.DEPTNO
)
GROUP BY DEPTNO ) b
on a.DEPTNO = b.DEPTNO;


--Display the managers who earn salary greater than alltheir subordinates
SELECT *,SUM(SAL) OVER (PARTITION BY MGR ) AS SAL_ALL_EMP 
FROM 
(
SELECT a.*,b.SAL AS MGR_SAL
CASE WHEN a.SAL <= b.SAL THEN 1 ELSE 0 END AS "ATLEAST_EARN_FLAG" 
FROM "SANTOSH"."EMPLOYEE"."EMP_TABLE" a
LEFT JOIN "SANTOSH"."EMPLOYEE"."EMP_TABLE" b
on a.MGR = b.EMPNO
order by MGR
)
WHERE "ATLEAST_EARN_FLAG"  = 1;

--Display the managers who earn salary greater than all their subordinates
SELECT DISTINCT MGR,MGR_NM,CASE WHEN MGR_SAL > SAL_ALL_EMP THEN 1 ELSE 0 END AS "FLAG" FROM 
(
SELECT *,SUM(SAL) OVER (PARTITION BY MGR ) AS SAL_ALL_EMP 
FROM 
(
SELECT a.*,b.ENAME AS MGR_NM,b.SAL AS MGR_SAL
FROM "SANTOSH"."EMPLOYEE"."EMP_TABLE" a
LEFT JOIN "SANTOSH"."EMPLOYEE"."EMP_TABLE" b
on a.MGR = b.EMPNO
order by MGR
)
)
WHERE "FLAG"  = 1;


--Display the employees who work in the same department as their manager 

SELECT *,
CASE WHEN DEPTNO = MGR_DEPT THEN 1 ELSE 0 END AS "FLAG"
FROM 
(
SELECT a.EMPNO,a.ENAME,a.MGR,a.DEPTNO,b.ENAME AS MGR_NM,b.DEPTNO AS MGR_DEPT
FROM "SANTOSH"."EMPLOYEE"."EMP_TABLE" a
LEFT JOIN "SANTOSH"."EMPLOYEE"."EMP_TABLE" b
on b.EMPNO = a.MGR
)
WHERE "FLAG"  = 1;
