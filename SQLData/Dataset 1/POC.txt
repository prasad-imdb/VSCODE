CREATE OR REPLACE TABLE PRIME_RECRUITERS.OPEN_REQS.PRODUCTS (
  PRODUCT_ID NVARCHAR(255),
  PRODUCT NVARCHAR(255),
  CATEGORY  NVARCHAR(255),
  SUB_CATEGORY INTEGER
);

CREATE OR REPLACE TABLE PRIME_RECRUITERS.OPEN_REQS.SALES1
(   transaction_id integer,
	transactional_date DATE,
	product_id NVARCHAR(255),
    customer_id integer,
    payment NVARCHAR(255),
    credit_card bigint,
    loyalty_card NVARCHAR(255),
    cost numeric,
    quantity integer,
    price numeric
);

CREATE OR REPLACE TABLE PRIME_RECRUITERS.OPEN_REQS.SALES2
(   transaction_id integer,
	transactional_date DATE,
	product_id NVARCHAR(255),
    customer_id integer,
    payment NVARCHAR(255),
    credit_card bigint,
    loyalty_card NVARCHAR(255),
    cost numeric,
    quantity integer,
    price numeric
);



create or replace view PRIME_RECRUITERS.OPEN_REQS.V_PRODUCT_SALES AS 
(
SELECT TRANSACTION_ID, TRANSACTIONAL_DATE, s.PRODUCT_ID, CUSTOMER_ID,
credit_card,loyalty_card,PAYMENT,COST, QUANTITY, PRICE ,
p.PRODUCT,p.CATEGORY,p.SUB_CATEGORY
FROM PRIME_RECRUITERS.OPEN_REQS.SALES1 s
LEFT JOIN PRIME_RECRUITERS.OPEN_REQS.PRODUCTS p
ON s.PRODUCT_ID = p.PRODUCT_ID
);

CREATE OR REPLACE TABLE PRIME_RECRUITERS.OPEN_REQS.TD_PRODUCT_SALES AS
(SELECT '2022-01-01' as LOAD_DATE,* FROM PRIME_RECRUITERS.OPEN_REQS.V_PRODUCT_SALES);


create or replace TABLE PRIME_RECRUITERS.OPEN_REQS.EXCEPTIONS (
	SCHEMA VARCHAR(100),
	STORED_PROCEDURE VARCHAR(100),
	ERROR_CODE VARCHAR(50),
	ERROR_MSG VARCHAR(5000),
	TIME_STAMP TIMESTAMP_NTZ(9),
	RESOLVED NUMBER(38,0),
	RESOLVED_DATETIME TIMESTAMP_NTZ(9),
	RESOLVED_BY VARCHAR(100)
);

create or replace TABLE PRIME_RECRUITERS.OPEN_REQS.JOB_LOG (
	LOAD_DATE DATE,
	COMPONENT VARCHAR(100),
	STATUS VARCHAR(50),
	LOAD_TIME TIME(9),
	MSG VARCHAR(5000)
);

CREATE OR REPLACE PROCEDURE PRIME_RECRUITERS.OPEN_REQS.SP_USP_PRODUCT_SALES_LOAD("LOAD_DATE" DATE)
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
begin

DELETE FROM PRIME_RECRUITERS.OPEN_REQS.TD_PRODUCT_SALES;
INSERT INTO PRIME_RECRUITERS.OPEN_REQS.TD_PRODUCT_SALES  
SELECT TO_DATE(:LOAD_DATE),* FROM PRIME_RECRUITERS.OPEN_REQS.V_PRODUCT_SALES;

INSERT INTO "DEV_RDS"."LEARNING_HUB"."JOB_LOG" VALUES(CURRENT_DATE, ''SP_USP_PRODUCT_SALES_LOAD'', ''COMPLETE'', CURRENT_TIME, '''');
return ''success'';

exception
  when statement_error then
    insert into PRIME_RECRUITERS.OPEN_REQS.EXCEPTIONS(SCHEMA, STORED_PROCEDURE, ERROR_CODE, ERROR_MSG,TIME_STAMP,RESOLVED) VALUES(''OPEN_REQS'', ''SP_USP_PRODUCT_SALES_LOAD'', :sqlcode, ''Error message is :  '' ||  :sqlerrm, CURRENT_TIMESTAMP, 0);
    return ''Fail'';
  when expression_error then
    insert into PRIME_RECRUITERS.OPEN_REQS.EXCEPTIONS(SCHEMA, STORED_PROCEDURE, ERROR_CODE, ERROR_MSG,TIME_STAMP,RESOLVED) VALUES(''OPEN_REQS'', ''SP_USP_PRODUCT_SALES_LOAD'', :sqlcode, ''Error message is :  '' ||  :sqlerrm, CURRENT_TIMESTAMP, 0);
    return ''Fail'';
  when other then
    insert into PRIME_RECRUITERS.OPEN_REQS.EXCEPTIONS(SCHEMA, STORED_PROCEDURE, ERROR_CODE, ERROR_MSG,TIME_STAMP,RESOLVED) VALUES(''OPEN_REQS'', ''SP_USP_PRODUCT_SALES_LOAD'', :sqlcode, ''Error message is :  '' ||  :sqlerrm, CURRENT_TIMESTAMP, 0);
    return ''Fail'';

end;
';

CREATE OR REPLACE NOTIFICATION INTEGRATION EMAIL_ALERT 
TYPE = EMAIL
ENABLED = TRUE
ALLOWED_RECIPIENTS = (@prasad.imdb@gmail.com)
COMMENTS = 'Testing email Notification'



