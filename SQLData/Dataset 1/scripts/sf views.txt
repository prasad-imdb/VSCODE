CREATE DATABASE TESTDB;
CREATE SCHEMA "SCHEMA";
-- 02 JOIN
-- join example tables, left and right

CREATE TABLE left1  ( id INTEGER, description NVARCHAR(255) );
CREATE TABLE right1 ( id INTEGER, description NVARCHAR(255) );


INSERT INTO left1 VALUES ( 1, 'left 01' );
INSERT INTO left1 VALUES ( 2, 'left 02' );
INSERT INTO left1 VALUES ( 3, 'left 03' );
INSERT INTO left1 VALUES ( 4, 'left 04' );
INSERT INTO left1 VALUES ( 5, 'left 05' );
INSERT INTO left1 VALUES ( 6, 'left 06' );
INSERT INTO left1 VALUES ( 7, 'left 07' );
INSERT INTO left1 VALUES ( 8, 'left 08' );
INSERT INTO left1 VALUES ( 9, 'left 09' );

INSERT INTO right1 VALUES ( 6, 'right 06' );
INSERT INTO right1 VALUES ( 7, 'right 07' );
INSERT INTO right1 VALUES ( 8, 'right 08' );
INSERT INTO right1 VALUES ( 9, 'right 09' );
INSERT INTO right1 VALUES ( 10, 'right 10' );
INSERT INTO right1 VALUES ( 11, 'right 11' );
INSERT INTO right1 VALUES ( 11, 'right 12' );
INSERT INTO right1 VALUES ( 11, 'right 13' );
INSERT INTO right1 VALUES ( 11, 'right 14' );

SELECT * FROM left1;
SELECT * FROM right1;

--INNER
SELECT l.description AS left1, r.description AS right1
  FROM left1 AS l
  JOIN right1 AS r ON l.id = r.id
  ;

  SELECT l.description AS left1, r.description AS right1
  FROM left1 AS l
  INNER JOIN right1 AS r ON l.id = r.id
  ;
  
--LEFT  
SELECT * FROM left1;
SELECT * FROM right1;

  SELECT l.*, r.*
  FROM left1 AS l
  LEFT JOIN right1 AS r ON l.id = r.id
  ORDER BY l.id --(id is available in Both) 
  ;


--RIGHT 
SELECT * FROM left1;
SELECT * FROM right1;

  SELECT l.*, r.*
  FROM left1 AS l
  RIGHT JOIN right1 AS r ON l.id = r.id
  ORDER BY l.id --(id is available in Both) 
  ; 
 
--FULL
SELECT * FROM left1;
SELECT * FROM right1;

  SELECT l.*, r.*,COALESCE(l.id,r.id) NewId
  FROM left1 AS l
  FULL JOIN right1 AS r ON l.id = r.id
  ORDER BY l.id --(id is available in Both) 
  ;  
 
--CROSS JOIN:

create table "NAME_LIST"
(
"Id" integer,
"F_Name" nvarchar(65),
"L_Name" nvarchar(65),
"Movie_Id" integer
);

INSERT INTO "NAME_LIST" VALUES (1,'Adam','Smith',1);
INSERT INTO "NAME_LIST" VALUES (2,'Ravi','Kumar',2);
INSERT INTO "NAME_LIST" VALUES (3,'Susan','Davidson',5);
INSERT INTO "NAME_LIST" VALUES (4,'Lee','Pong',10);
INSERT INTO "NAME_LIST" VALUES (5,'Jenny','Adrianna',8);

SELECT * FROM "NAME_LIST";

create table "MOVIE_LIST"
(
"Id" integer,
"Title" nvarchar(65),
"Category" nvarchar(65)
);
  
INSERT INTO  "MOVIE_LIST" VALUES (1,'ASSASSIN CREED: EMBERS','Animations');
INSERT INTO  "MOVIE_LIST" VALUES (2,'Real_Steel(2012)','Animations');
INSERT INTO  "MOVIE_LIST" VALUES (3,'Alvin_and_the_Chipmunks','Animations');
INSERT INTO  "MOVIE_LIST" VALUES (4,'The Adventures of Tin Tin','Animations');
INSERT INTO  "MOVIE_LIST" VALUES (5,'Safe (2012)','Action');
INSERT INTO  "MOVIE_LIST" VALUES (6,'Safe House(2012)','Action');
INSERT INTO  "MOVIE_LIST" VALUES (7,'GIA','18+');
INSERT INTO  "MOVIE_LIST" VALUES (8,'Deadline 2009','18+');
INSERT INTO  "MOVIE_LIST" VALUES (9,'The Dirty Picture','18+');
INSERT INTO  "MOVIE_LIST" VALUES (10,'Marley and me','Romance');

SELECT * FROM "NAME_LIST";
select * from "MOVIE_LIST";

select * from "NAME_LIST","MOVIE_LIST"
ORDER BY 1,5;

SELECT * FROM "NAME_LIST" CROSS JOIN "MOVIE_LIST"
ORDER BY 1,5;

--If we use WHERE Clause It becomes = Inner join 
CREATE VIEW "MOVIES_BY_NAME" AS
SELECT a.*,b."Title",b."Category" FROM "NAME_LIST" a LEFT JOIN "MOVIE_LIST" b
--WHERE "NAME_LIST"."Movie_Id" = "MOVIE_LIST"."Id" 
ORDER BY 1,5;

----------------------------------------------------------------------

CREATE TABLE TESTDB.SCHEMA.CUSTOMERS(
    id              INTEGER PRIMARY KEY, 
    name            NVARCHAR(255),
    address         NVARCHAR(255),
    city            NVARCHAR(255),
    state           NVARCHAR(255),
    zip             NVARCHAR(255)
);

CREATE TABLE TESTDB.SCHEMA.ITEM (
    id              INTEGER PRIMARY KEY,
    name            NVARCHAR(255),
    description     NVARCHAR(255)
);

CREATE TABLE TESTDB.SCHEMA.SALE (
    id              INTEGER PRIMARY KEY,
    item_id         INTEGER,
    customer_id     INTEGER,
    date            NVARCHAR(255),
    quantity        INTEGER,
    price           INTEGER     -- in cents
);

INSERT INTO TESTDB.SCHEMA.CUSTOMERS ( id, name, address, city, state, zip ) VALUES ( 1, 'Bill Smith', '123 Main Street', 'Hope', 'CA', '98765' );
INSERT INTO TESTDB.SCHEMA.CUSTOMERS ( id, name, address, city, state, zip ) VALUES ( 2, 'Mary Smith', '123 Dorian Street', 'Harmony', 'AZ', '98765' );
INSERT INTO TESTDB.SCHEMA.CUSTOMERS ( id, name, address, city, state, zip ) VALUES ( 3, 'Bob Smith', '123 Laugh Street', 'Humor', 'CA', '98765' );

INSERT INTO TESTDB.SCHEMA.ITEM ( id, name, description ) VALUES ( 1, 'Box of 64 Pixels', '64 RGB pixels in a decorative box' );
INSERT INTO TESTDB.SCHEMA.ITEM ( id, name, description ) VALUES ( 2, 'Sense of Humor', 'Especially dry. Imported from England.' );
INSERT INTO TESTDB.SCHEMA.ITEM ( id, name, description ) VALUES ( 3, 'Beauty', 'Inner beauty. No cosmetic surgery required!' );
INSERT INTO TESTDB.SCHEMA.ITEM ( id, name, description ) VALUES ( 4, 'Bar Code', 'Unused. In original packaging.' );

INSERT INTO TESTDB.SCHEMA.SALE ( id, item_id, customer_id, date, quantity, price ) VALUES ( 1, 1, 2, '2009-02-27', 3, 2995 );
INSERT INTO TESTDB.SCHEMA.SALE ( id, item_id, customer_id, date, quantity, price ) VALUES ( 2, 2, 2, '2009-02-27', 1, 1995 );
INSERT INTO TESTDB.SCHEMA.SALE ( id, item_id, customer_id, date, quantity, price ) VALUES ( 3, 1, 1, '2009-02-28', 1, 2995 );
INSERT INTO TESTDB.SCHEMA.SALE ( id, item_id, customer_id, date, quantity, price ) VALUES ( 4, 4, 3, '2009-02-28', 2, 999 );
INSERT INTO TESTDB.SCHEMA.SALE ( id, item_id, customer_id, date, quantity, price ) VALUES ( 5, 1, 2, '2009-02-28', 1, 2995 );
COMMIT;
-- sale example
SELECT * FROM sale;
SELECT * FROM item;

SELECT s.id AS sale, i.name, s.price 
  FROM sale AS s
  INNER JOIN item AS i ON s.item_id = i.id
  ;

SELECT s.id AS sale, s.date, i.name, i.description, s.price 
  FROM sale AS s
  INNER JOIN item AS i ON s.item_id = i.id
  ;

-- 03 Junction Table

SELECT * FROM customers;
SELECT * FROM item;
SELECT * FROM sale;

SELECT c.name AS Cust, c.zip, i.name AS Item, i.description, s.quantity AS Quan, s.price AS Price
  FROM sale AS s
  JOIN item AS i ON s.item_id = i.id
  JOIN customers AS c ON s.customer_id = c.id
  ORDER BY Cust, Item
;

-- a customer without sales
INSERT INTO customers VALUES (6,'Jane Smith',NULL,NULL,'CA','91234' );
SELECT * FROM customers;

-- left joins
CREATE VIEW "SALE_ITEMS" AS
SELECT c.name AS Cust, c.zip, i.name AS Item, i.description, s.quantity AS Quan, s.price AS Price
  FROM customers AS c
  LEFT JOIN sale AS s ON s.customer_id = c.id
  LEFT JOIN item AS i ON s.item_id = i.id
  ORDER BY Cust, Item
;


-- ONE MORE EXAMPLE
--To create a Table: “PRODUCTS”

CREATE  TABLE "TESTDB"."SCHEMA"."PRODUCTS"
(
    "ID" INTEGER PRIMARY KEY ,
    "PRODUCT_NAME" VARCHAR(100),
    "PRICE" DECIMAL(13 , 2 )
);

--To insert a records into the “PRODUCTS” Table:
SELECT * FROM "TESTDB"."SCHEMA"."PRODUCTS";
INSERT INTO "TESTDB"."SCHEMA"."PRODUCTS" ("ID","PRODUCT_NAME", "PRICE") VALUES (1,'iPhone', 699.00);
INSERT INTO "TESTDB"."SCHEMA"."PRODUCTS"("ID","PRODUCT_NAME", "PRICE") VALUES (2,'iPad',599.00);
INSERT INTO "TESTDB"."SCHEMA"."PRODUCTS" ("ID","PRODUCT_NAME", "PRICE") VALUES (3,'Macbook Pro',1299.00);

 
--To create a Table: “STORES”

CREATE TABLE "TESTDB"."SCHEMA"."STORES"
 (
    "ID" INT PRIMARY KEY ,
    "STORE_NAME" VARCHAR(100)
);

--To insert a records into the “STORES” Table:

INSERT INTO "TESTDB"."SCHEMA"."STORES"("ID","STORE_NAME")VALUES(1,'North');
INSERT INTO "TESTDB"."SCHEMA"."STORES"("ID","STORE_NAME")VALUES(2,'South');
--To create a Table: “SALES”

CREATE TABLE "TESTDB"."SCHEMA"."SALES" (
    "PRODUCT_ID" INT,
    "STORE_ID" INT,
    "QUANTITY" DECIMAL(13 , 2 ) NOT NULL,
    "SALES_DATE" DATE NOT NULL,
    PRIMARY KEY ("PRODUCT_ID", "STORE_ID"),
    FOREIGN KEY ("PRODUCT_ID")
        REFERENCES "PRODUCTS" ("ID")
        ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY ("STORE_ID")
        REFERENCES "STORES" ("ID")
        ON DELETE CASCADE ON UPDATE CASCADE
);


--To insert a records into the “SALES” Table:

INSERT INTO "SALES"("STORE_ID","PRODUCT_ID","QUANTITY","SALES_DATE")VALUES(1,1,20,'2017-01-02');
INSERT INTO "SALES"("STORE_ID","PRODUCT_ID","QUANTITY","SALES_DATE")VALUES(1,2,15,'2017-01-05');
INSERT INTO "SALES"("STORE_ID","PRODUCT_ID","QUANTITY","SALES_DATE")VALUES(1,3,25,'2017-01-05');
INSERT INTO "SALES"("STORE_ID","PRODUCT_ID","QUANTITY","SALES_DATE")VALUES(2,1,30,'2017-01-02');
INSERT INTO "SALES"("STORE_ID","PRODUCT_ID","QUANTITY","SALES_DATE")VALUES(2,2,35,'2017-01-05');

--To get the total sales for each store and for each product, you calculate the sales and group them by store and product as follows:

SELECT
    "STORE_NAME",
    "PRODUCT_NAME",
    SUM("QUANTITY" * "PRICE") AS revenue
FROM
    "SALES"
        INNER JOIN
    "PRODUCTS" ON "PRODUCTS"."ID" = "SALES"."PRODUCT_ID"
        INNER JOIN
    "STORES" ON "STORES"."ID" = "SALES"."STORE_ID"
GROUP BY "STORE_NAME" , "PRODUCT_NAME";

--Use Cross join To Know which is not doing good

SELECT
    "STORE_NAME", "PRODUCT_NAME"
FROM "STORES" AS a
CROSS JOIN
"PRODUCTS" AS b;

create view "STORE_REVENUE" AS
SELECT
    b."STORE_NAME",
    a."PRODUCT_NAME",
    IFNULL(c.revenue, 0) AS revenue
FROM "PRODUCTS" AS a
CROSS JOIN
"STORES" AS b
LEFT JOIN
    (SELECT
        "STORES"."ID" AS "STORE_ID",
        "PRODUCTS"."ID" AS "PRODUCT_ID",
        "STORE_NAME",
        "PRODUCT_NAME",
         ROUND(SUM("QUANTITY" * "PRICE"), 0) AS revenue
    FROM
        "SALES"
    INNER JOIN "PRODUCTS" ON "PRODUCTS"."ID" = "SALES"."PRODUCT_ID"
    INNER JOIN "STORES" ON "STORES"."ID" = "SALES"."STORE_ID"
    GROUP BY "STORE_NAME" , "PRODUCT_NAME","STORES"."ID","PRODUCTS"."ID") AS c 
    ON c."STORE_ID" = b."ID"
   AND c."PRODUCT_ID"= a."ID"
ORDER BY b."STORE_NAME";





SELECT STORE_ID,SUM(TOTAL_AMT) FROM 
(
SELECT *,PRICE*QUANTITY AS TOTAL_AMT 
FROM 
(
SELECT *, 
     CASE WHEN PRODUCT_ID = 1 THEN '1000'
     WHEN PRODUCT_ID = 2 THEN '2000'
     WHEN PRODUCT_ID = 3 THEN '3000'
     ELSE 0 END AS "PRICE"
FROM "NAVEEN"."SALES"."SALES"
)
)
GROUP BY STORE_ID
ORDER BY SUM(TOTAL_AMT) DESC;
