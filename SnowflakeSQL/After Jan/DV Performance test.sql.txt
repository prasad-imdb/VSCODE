
Customer Stage Table:
create or replace TABLE DATA_VAULT_PERFORMANCE_TESTING.RAW.CUSTOMER (
	C_CUSTKEY NUMBER(38,0),
	C_NAME VARCHAR(25),
	C_ADDRESS VARCHAR(40),
	C_NATIONKEY NUMBER(38,0),
	C_PHONE VARCHAR(15),
	C_ACCTBAL NUMBER(12,2),
	C_MKTSEGMENT VARCHAR(10),
	C_COMMENT VARCHAR(117)
);

------------------------------------------------------------------------
DV Performance Test with HASH Keys and Natural Keys
------------------------------------------------------------------------

Create HUB ,LINK and SAT Tables for Customer and order tables as shown below and after initial load into HUB,LINK and SAT Tables
created BV On top of these tables : 

Hub Table:
create or replace TABLE DATA_VAULT_PERFORMANCE_TESTING.DV.CUSTOMER_HUB(
	C_CUSTKEY_HASH VARCHAR(16777216) NOT NULL,
	C_CUSTKEY VARCHAR(16777216) NOT NULL,
	SRC_SYS_KEY VARCHAR(16777216) NOT NULL,
	AUD_INS_DTTM TIMESTAMP_NTZ(9),
	AUD_INS_BATCH_NBR NUMBER(38,0),
	constraint CUSTOMER_HUB_PK primary key (C_CUSTKEY_HASH)
);

Loading HUB Table from the Customer Raw Table:
INSERT INTO DATA_VAULT_PERFORMANCE_TESTING.DV.CUSTOMER_HUB (C_CUSTKEY_HASH,C_CUSTKEY,SRC_SYS_KEY,AUD_INS_DTTM,AUD_INS_BATCH_NBR)
select * from 
(
SELECT IFF(NULLIF(CAST(C_CUSTKEY AS VARCHAR),'') IS NULL,'-1',MD5(CAST(C_CUSTKEY AS VARCHAR))) AS  C_CUSTKEY_HASH,
CAST( C_CUSTKEY AS VARCHAR) C_CUSTKEY,'TEST' SRC_SYS_KEY,CURRENT_TIMESTAMP AS AUD_INS_DTTM,1001 as AUD_INS_BATCH_NBR
FROM DATA_VAULT_PERFORMANCE_TESTING.RAW.CUSTOMER
) s
WHERE 
NOT EXISTS 
	(SELECT * FROM DATA_VAULT_PERFORMANCE_TESTING.DV.CUSTOMER_HUB hub
	 WHERE hub.C_CUSTKEY_HASH = s.C_CUSTKEY_HASH
     );


SAT Table:
create or replace TABLE DATA_VAULT_PERFORMANCE_TESTING.DV.CUSTOMER_SAT (
	C_CUSTKEY_HASH VARCHAR(16777216) NOT NULL,
	C_CUSTKEY VARCHAR(16777216) NOT NULL,
	EFF_FROM_DTTM TIMESTAMP_NTZ(9) NOT NULL,
	EFF_THRU_DTTM TIMESTAMP_NTZ(9),
	C_NAME VARCHAR(25),
	C_ADDRESS VARCHAR(40),
	C_NATIONKEY NUMBER(38,0),
	C_PHONE VARCHAR(15),
	C_ACCTBAL NUMBER(12,2),
	C_MKTSEGMENT VARCHAR(10),
	C_COMMENT VARCHAR(117),	
	AUD_CHKSUM VARCHAR(16777216) NOT NULL,
	AUD_CURR_FLG VARCHAR(1) NOT NULL,
	AUD_DEL_FLG VARCHAR(1) NOT NULL,
	AUD_INS_DTTM TIMESTAMP_NTZ(9),
	AUD_INS_BATCH_NBR NUMBER(38,0),
	AUD_LAST_UPDT_DTTM TIMESTAMP_NTZ(9),
	AUD_LAST_UPDT_BATCH_NBR NUMBER(38,0),
	constraint CUSTOMER_SAT_PK primary key (EFF_FROM_DTTM, C_CUSTKEY_HASH)
);

	
Initial Load for SAT Table from Customer stage Table :
INSERT INTO DATA_VAULT_PERFORMANCE_TESTING.DV.CUSTOMER_SAT (
C_CUSTKEY_HASH,C_CUSTKEY,EFF_FROM_DTTM,EFF_THRU_DTTM,C_NAME,C_ADDRESS,C_NATIONKEY,C_PHONE,C_ACCTBAL,C_MKTSEGMENT,
C_COMMENT,AUD_CHKSUM,AUD_CURR_FLG,AUD_DEL_FLG,AUD_INS_DTTM,AUD_INS_BATCH_NBR,AUD_LAST_UPDT_DTTM,AUD_LAST_UPDT_BATCH_NBR)
select * from 
(
SELECT IFF(NULLIF(CAST(C_CUSTKEY AS VARCHAR),'') IS NULL,'-1',MD5(CAST(C_CUSTKEY AS VARCHAR))) AS  C_CUSTKEY_HASH,
CAST( C_CUSTKEY AS VARCHAR) C_CUSTKEY,CURRENT_TIMESTAMP AS EFF_FROM_DTTM,'2099-12-31 00:00:00.000 -0000 ' AS EFF_THRU_DTTM,
C_NAME,C_ADDRESS,C_NATIONKEY,C_PHONE,C_ACCTBAL,C_MKTSEGMENT,C_COMMENT,
MD5(c_name || c_address || c_nationkey || c_phone || c_acctbal || c_mktsegment || c_comment) as AUD_CHKSUM,
'Y' AS AUD_CURR_FLG,
'N' AS AUD_DEL_FLG,
CURRENT_TIMESTAMP AS AUD_INS_DTTM,
'1001' AS AUD_INS_BATCH_NBR,
CURRENT_TIMESTAMP AS AUD_LAST_UPDT_DTTM,
'1000' AS AUD_LAST_UPDT_BATCH_NBR,
FROM DATA_VAULT_PERFORMANCE_TESTING.RAW.CUSTOMER
)
	 
next load:
NA For this Test 

-----------------------------------------------------------------------
orders stage Table
-----------------------------------------------------------------------
create or replace TABLE DATA_VAULT_PERFORMANCE_TESTING.RAW.ORDERS (
	O_ORDERKEY NUMBER(38,0),
	O_CUSTKEY NUMBER(38,0),
	O_ORDERSTATUS VARCHAR(1),
	O_TOTALPRICE NUMBER(12,2),
	O_ORDERDATE DATE,
	O_ORDERPRIORITY VARCHAR(15),
	O_CLERK VARCHAR(15),
	O_SHIPPRIORITY NUMBER(38,0),
	O_COMMENT VARCHAR(79)
);

Hub Table:
create or replace TABLE DATA_VAULT_PERFORMANCE_TESTING.DV.ORDERS_HUB(
	O_ORDERKEY_HASH VARCHAR(16777216) NOT NULL,
	O_ORDERKEY VARCHAR(16777216) NOT NULL,
	SRC_SYS_KEY VARCHAR(16777216) NOT NULL,
	AUD_INS_DTTM TIMESTAMP_NTZ(9),
	AUD_INS_BATCH_NBR NUMBER(38,0),
	constraint ORDERS_HUB_PK primary key (O_ORDERKEY_HASH)
);

Loading HUB Table from the Orders Raw Table:
INSERT INTO DATA_VAULT_PERFORMANCE_TESTING.DV.ORDERS_HUB (O_ORDERKEY_HASH,O_ORDERKEY,SRC_SYS_KEY,AUD_INS_DTTM,AUD_INS_BATCH_NBR)
select * from 
(
SELECT IFF(NULLIF(CAST(O_ORDERKEY AS VARCHAR),'') IS NULL,'-1',MD5(CAST(O_ORDERKEY AS VARCHAR))) AS  O_ORDERKEY_HASH,
CAST( O_ORDERKEY AS VARCHAR) O_ORDERKEY,'TEST' SRC_SYS_KEY,CURRENT_TIMESTAMP AS AUD_INS_DTTM,1001 as AUD_INS_BATCH_NBR
FROM DATA_VAULT_PERFORMANCE_TESTING.RAW.ORDERS
) s
WHERE 
NOT EXISTS 
	(SELECT * FROM DATA_VAULT_PERFORMANCE_TESTING.DV.ORDERS_HUB hub
	 WHERE hub.O_ORDERKEY_HASH = s.O_ORDERKEY_HASH
     );
	 
SAT Table:	 
create or replace TABLE DATA_VAULT_PERFORMANCE_TESTING.DV.ORDERS_SAT (
	O_ORDERKEY_HASH VARCHAR(16777216) NOT NULL,
	O_ORDERKEY VARCHAR(16777216) NOT NULL,
	EFF_FROM_DTTM TIMESTAMP_NTZ(9) NOT NULL,
	EFF_THRU_DTTM TIMESTAMP_NTZ(9),
	O_CUSTKEY NUMBER(38,0),
	O_ORDERSTATUS VARCHAR(1),
	O_TOTALPRICE NUMBER(12,2),
	O_ORDERDATE DATE,
	O_ORDERPRIORITY VARCHAR(15),
	O_CLERK VARCHAR(15),
	O_SHIPPRIORITY NUMBER(38,0),
	O_COMMENT VARCHAR(79),
	AUD_CHKSUM VARCHAR(16777216) NOT NULL,
	AUD_CURR_FLG VARCHAR(1) NOT NULL,
	AUD_DEL_FLG VARCHAR(1) NOT NULL,
	AUD_INS_DTTM TIMESTAMP_NTZ(9),
	AUD_INS_BATCH_NBR NUMBER(38,0),
	AUD_LAST_UPDT_DTTM TIMESTAMP_NTZ(9),
	AUD_LAST_UPDT_BATCH_NBR NUMBER(38,0),
	constraint ORDERS_SAT_PK primary key (EFF_FROM_DTTM,O_ORDERKEY_HASH)
);

Initial Load into SAT Table from Orders Raw Table:
INSERT INTO DATA_VAULT_PERFORMANCE_TESTING.DV.ORDERS_SAT 
(
O_ORDERKEY_HASH,O_ORDERKEY,EFF_FROM_DTTM,EFF_THRU_DTTM,O_CUSTKEY,O_ORDERSTATUS,O_TOTALPRICE,O_ORDERDATE,
O_ORDERPRIORITY,O_CLERK,O_SHIPPRIORITY,O_COMMENT,AUD_CHKSUM,AUD_CURR_FLG,AUD_DEL_FLG,AUD_INS_DTTM,AUD_INS_BATCH_NBR,
AUD_LAST_UPDT_DTTM,AUD_LAST_UPDT_BATCH_NBR
)
select * from 
(
SELECT IFF(NULLIF(CAST(O_ORDERKEY AS VARCHAR),'') IS NULL,'-1',MD5(CAST(O_ORDERKEY AS VARCHAR))) AS  O_ORDERKEY_HASH,
CAST( O_ORDERKEY AS VARCHAR) O_ORDERKEY,CURRENT_TIMESTAMP AS EFF_FROM_DTTM,'2099-12-31 00:00:00.000 -0000 ' AS EFF_THRU_DTTM,
O_CUSTKEY,O_ORDERSTATUS,O_TOTALPRICE,O_ORDERDATE,O_ORDERPRIORITY,O_CLERK,O_SHIPPRIORITY,O_COMMENT,
MD5(O_CUSTKEY || O_ORDERSTATUS || O_TOTALPRICE || O_ORDERDATE || O_ORDERPRIORITY || O_CLERK || O_SHIPPRIORITY || O_COMMENT) as AUD_CHKSUM,
'Y' AS AUD_CURR_FLG,
'N' AS AUD_DEL_FLG,
CURRENT_TIMESTAMP AS AUD_INS_DTTM,
'1001' AS AUD_INS_BATCH_NBR,
CURRENT_TIMESTAMP AS AUD_LAST_UPDT_DTTM,
'1000' AS AUD_LAST_UPDT_BATCH_NBR
FROM DATA_VAULT_PERFORMANCE_TESTING.RAW.ORDERS
);

---------------------------------------------------------
link between customer and orders
---------------------------------------------------------
Link Table :

create or replace TABLE DATA_VAULT_PERFORMANCE_TESTING.DV.CUST_ORDERS_LNK  (
	CUST_ORDERS_LNK_KEY_HASH VARCHAR(16777216) NOT NULL,
	CUST_ORDERS_LNK_KEY VARCHAR(16777216) NOT NULL,
	SRC_SYS_KEY VARCHAR(16777216) NOT NULL,
	AUD_INS_DTTM TIMESTAMP_NTZ(9),
	AUD_INS_BATCH_NBR NUMBER(38,0),
    O_CUSTKEY_HASH  VARCHAR(16777216) NOT NULL,
	O_ORDERKEY_HASH VARCHAR(16777216) NOT NULL,
	O_CUSTKEY  VARCHAR(16777216) NOT NULL,
	O_ORDERKEY VARCHAR(16777216) NOT NULL,	
	constraint CUST_ORDERS_LNK_PK primary key (CUST_ORDERS_LNK_KEY_HASH),
	constraint CUST_ORDERS_LNK_KEY_CUSTOMER_HUB_FK foreign key (O_CUSTKEY_HASH) references DATA_VAULT_PERFORMANCE_TESTING.DV.CUSTOMER_HUB(C_CUSTKEY_HASH),
	constraint CUST_ORDERS_LNK_KEY_ORDERS_HUB_FK foreign key (O_ORDERKEY_HASH) references DATA_VAULT_PERFORMANCE_TESTING.DV.ORDERS_HUB(O_ORDERKEY_HASH)
);

Initial Load for Link Table from Orders Raw Table: (Transaction Table):

INSERT INTO DATA_VAULT_PERFORMANCE_TESTING.DV.CUST_ORDERS_LNK 
(CUST_ORDERS_LNK_KEY_HASH,CUST_ORDERS_LNK_KEY,SRC_SYS_KEY,AUD_INS_DTTM,AUD_INS_BATCH_NBR,
O_CUSTKEY_HASH,O_ORDERKEY_HASH,O_CUSTKEY,O_ORDERKEY)
select * from 
(
SELECT 
CONCAT(IFF(NULLIF(CAST(O_ORDERKEY AS VARCHAR),'') IS NULL,'-1',MD5(CAST(O_ORDERKEY AS VARCHAR))),
IFF(NULLIF(CAST(O_CUSTKEY AS VARCHAR),'') IS NULL,'-1',MD5(CAST(O_CUSTKEY AS VARCHAR)))) AS  CUST_ORDERS_LNK_KEY_HASH,
CONCAT(CAST( O_ORDERKEY AS VARCHAR),CAST(O_CUSTKEY AS VARCHAR)) CUST_ORDERS_LNK_KEY,'TEST' SRC_SYS_KEY,
CURRENT_TIMESTAMP AS AUD_INS_DTTM,1001 as AUD_INS_BATCH_NBR,
IFF(NULLIF(CAST(O_CUSTKEY AS VARCHAR),'') IS NULL,'-1',MD5(CAST(O_CUSTKEY AS VARCHAR))) AS O_CUSTKEY_HASH,
IFF(NULLIF(CAST(O_ORDERKEY AS VARCHAR),'') IS NULL,'-1',MD5(CAST(O_ORDERKEY AS VARCHAR))) AS O_ORDERKEY_HASH,
CAST(O_CUSTKEY AS VARCHAR) AS O_CUSTKEY,
CAST( O_ORDERKEY AS VARCHAR) AS O_ORDERKEY
FROM DATA_VAULT_PERFORMANCE_TESTING.RAW.ORDERS
) s
WHERE 
NOT EXISTS 
	(SELECT * FROM DATA_VAULT_PERFORMANCE_TESTING.DV.CUST_ORDERS_LNK  LNK
	 WHERE LNK.CUST_ORDERS_LNK_KEY_HASH = s.CUST_ORDERS_LNK_KEY_HASH
     );
     
	 
Link Sat Table: Not Used for this test as we dont have pipeline Data 

create or replace TABLE DATA_VAULT_PERFORMANCE_TESTING.DV.CUST_ORDERS_LNK_SAT (
	CUST_ORDERS_LNK_KEY_HASH VARCHAR(16777216) NOT NULL,
    CUST_ORDERS_LNK_KEY VARCHAR(16777216) NOT NULL,
	EFF_FROM_DTTM TIMESTAMP_NTZ(9) NOT NULL,
	EFF_THRU_DTTM TIMESTAMP_NTZ(9),
	AUD_CHKSUM VARCHAR(16777216) NOT NULL,
	AUD_CURR_FLG VARCHAR(1) NOT NULL,
	AUD_DEL_FLG VARCHAR(1) NOT NULL,
	AUD_INS_DTTM TIMESTAMP_NTZ(9),
	AUD_INS_BATCH_NBR NUMBER(38,0),
	AUD_LAST_UPDT_DTTM TIMESTAMP_NTZ(9),
	AUD_LAST_UPDT_BATCH_NBR NUMBER(38,0),
	constraint CUST_ORDERS_LNK_SAT_PK primary key (EFF_FROM_DTTM, CUST_ORDERS_LNK_KEY_HASH)
);

-----------------------------------------------------------------
Business Vault
-----------------------------------------------------------------

--CUSTOMER DIM:

CREATE OR REPLACE VIEW DATA_VAULT_PERFORMANCE_TESTING.BV.V_CUSTOMER_DIM_HASH AS 
(select 
HUB.C_CUSTKEY_HASH,HUB.C_CUSTKEY,SAT.C_NAME,SAT.C_ADDRESS,SAT.C_NATIONKEY,SAT.C_PHONE,SAT.C_ACCTBAL,SAT.C_MKTSEGMENT,
SAT.C_COMMENT
FROM DV.CUSTOMER_HUB HUB
INNER JOIN DV.CUSTOMER_SAT SAT 
on SAT.C_CUSTKEY_HASH =  HUB.C_CUSTKEY_HASH 
AND SAT.AUD_CURR_FLG = 'Y' AND SAT.AUD_DEL_FLG = 'N');

CREATE OR REPLACE VIEW DATA_VAULT_PERFORMANCE_TESTING.BV.V_CUSTOMER_DIM AS 
(
select 
HUB.C_CUSTKEY_HASH,HUB.C_CUSTKEY,SAT.C_NAME,SAT.C_ADDRESS,SAT.C_NATIONKEY,SAT.C_PHONE,SAT.C_ACCTBAL,SAT.C_MKTSEGMENT,
SAT.C_COMMENT
FROM DV.CUSTOMER_HUB HUB
INNER JOIN DV.CUSTOMER_SAT SAT 
on SAT.C_CUSTKEY =  HUB.C_CUSTKEY
AND SAT.AUD_CURR_FLG = 'Y' AND SAT.AUD_DEL_FLG = 'N'
);

--ORDERS DIM:

CREATE OR REPLACE VIEW DATA_VAULT_PERFORMANCE_TESTING.BV.V_ORDERS_DIM_HASH AS 
(
SELECT
HUB.O_ORDERKEY_HASH,HUB.O_ORDERKEY,SAT.O_CUSTKEY,SAT.O_ORDERSTATUS,SAT.O_TOTALPRICE,SAT.O_ORDERDATE,
SAT.O_ORDERPRIORITY,SAT.O_CLERK,SAT.O_SHIPPRIORITY,SAT.O_COMMENT
FROM DV.ORDERS_HUB HUB
INNER JOIN DV.ORDERS_SAT SAT 
on SAT.O_ORDERKEY_HASH =  HUB.O_ORDERKEY_HASH
AND SAT.AUD_CURR_FLG = 'Y' AND SAT.AUD_DEL_FLG = 'N'
);

CREATE OR REPLACE VIEW DATA_VAULT_PERFORMANCE_TESTING.BV.V_ORDERS_DIM AS 
(
SELECT
HUB.O_ORDERKEY_HASH,HUB.O_ORDERKEY,SAT.O_CUSTKEY,SAT.O_ORDERSTATUS,SAT.O_TOTALPRICE,SAT.O_ORDERDATE,
SAT.O_ORDERPRIORITY,SAT.O_CLERK,SAT.O_SHIPPRIORITY,SAT.O_COMMENT
FROM DV.ORDERS_HUB HUB
INNER JOIN DV.ORDERS_SAT SAT 
on SAT.O_ORDERKEY =  HUB.O_ORDERKEY
AND SAT.AUD_CURR_FLG = 'Y' AND SAT.AUD_DEL_FLG = 'N'
);

--Customer/Orders FACT:

CREATE OR REPLACE VIEW DATA_VAULT_PERFORMANCE_TESTING.BV.V_CUST_ORDERS_FACT_HASH AS 
(
SELECT
HUB.O_ORDERKEY_HASH,HUB.O_ORDERKEY,SAT.O_CUSTKEY,SAT.O_ORDERSTATUS,SAT.O_TOTALPRICE,SAT.O_ORDERDATE,
SAT.O_ORDERPRIORITY,SAT.O_CLERK,SAT.O_SHIPPRIORITY,SAT.O_COMMENT
FROM DV.ORDERS_HUB HUB
INNER JOIN DV.ORDERS_SAT SAT 
on SAT.O_ORDERKEY_HASH =  HUB.O_ORDERKEY_HASH
AND SAT.AUD_CURR_FLG = 'Y' AND SAT.AUD_DEL_FLG = 'N'
INNER JOIN DV.CUST_ORDERS_LNK LNK
ON LNK.O_ORDERKEY_HASH = HUB.O_ORDERKEY_HASH
)
;

CREATE OR REPLACE VIEW DATA_VAULT_PERFORMANCE_TESTING.BV.V_CUST_ORDERS_FACT AS 
(
SELECT
HUB.O_ORDERKEY_HASH,HUB.O_ORDERKEY,SAT.O_CUSTKEY,SAT.O_ORDERSTATUS,SAT.O_TOTALPRICE,SAT.O_ORDERDATE,
SAT.O_ORDERPRIORITY,SAT.O_CLERK,SAT.O_SHIPPRIORITY,SAT.O_COMMENT
FROM DV.ORDERS_HUB HUB
INNER JOIN DV.ORDERS_SAT SAT 
on SAT.O_ORDERKEY =  HUB.O_ORDERKEY
AND SAT.AUD_CURR_FLG = 'Y' AND SAT.AUD_DEL_FLG = 'N'
INNER JOIN DV.CUST_ORDERS_LNK LNK
ON LNK.O_ORDERKEY = HUB.O_ORDERKEY
)
;



------------------------------------------------------------------------
DV Performance Test with Binary 
------------------------------------------------------------------------
--Customer HUB Table
create or replace TABLE DATA_VAULT_PERFORMANCE_TESTING.DV.CUSTOMER_HUB_BINARY(
	C_CUSTKEY_HASH VARCHAR(16777216) NOT NULL,
	C_CUSTKEY BINARY NOT NULL,
	SRC_SYS_KEY VARCHAR(16777216) NOT NULL,
	AUD_INS_DTTM TIMESTAMP_NTZ(9),
	AUD_INS_BATCH_NBR NUMBER(38,0),
	constraint CUSTOMER_HUB_PK primary key (C_CUSTKEY_HASH)
);


--Initial Load into HUB Table
INSERT INTO DATA_VAULT_PERFORMANCE_TESTING.DV.CUSTOMER_HUB_BINARY (C_CUSTKEY_HASH,C_CUSTKEY,SRC_SYS_KEY,AUD_INS_DTTM,AUD_INS_BATCH_NBR)
select * from 
(
SELECT IFF(NULLIF(CAST(C_CUSTKEY AS VARCHAR),'') IS NULL,'-1',MD5(CAST(C_CUSTKEY AS VARCHAR))) AS  C_CUSTKEY_HASH,
MD5_BINARY(C_CUSTKEY) C_CUSTKEY,'TEST' SRC_SYS_KEY,CURRENT_TIMESTAMP AS AUD_INS_DTTM,1001 as AUD_INS_BATCH_NBR
FROM DATA_VAULT_PERFORMANCE_TESTING.RAW.CUSTOMER
) s
WHERE 
NOT EXISTS 
	(SELECT * FROM DATA_VAULT_PERFORMANCE_TESTING.DV.CUSTOMER_HUB_BINARY hub
	 WHERE hub.C_CUSTKEY_HASH = s.C_CUSTKEY_HASH
     );

--Customer SAT Table 
create or replace TABLE DATA_VAULT_PERFORMANCE_TESTING.DV.CUSTOMER_SAT_BINARY (
	C_CUSTKEY_HASH VARCHAR(16777216) NOT NULL,
	C_CUSTKEY BINARY NOT NULL,
	EFF_FROM_DTTM TIMESTAMP_NTZ(9) NOT NULL,
	EFF_THRU_DTTM TIMESTAMP_NTZ(9),
	C_NAME VARCHAR(25),
	C_ADDRESS VARCHAR(40),
	C_NATIONKEY NUMBER(38,0),
	C_PHONE VARCHAR(15),
	C_ACCTBAL NUMBER(12,2),
	C_MKTSEGMENT VARCHAR(10),
	C_COMMENT VARCHAR(117),	
	AUD_CHKSUM VARCHAR(16777216) NOT NULL,
	AUD_CURR_FLG VARCHAR(1) NOT NULL,
	AUD_DEL_FLG VARCHAR(1) NOT NULL,
	AUD_INS_DTTM TIMESTAMP_NTZ(9),
	AUD_INS_BATCH_NBR NUMBER(38,0),
	AUD_LAST_UPDT_DTTM TIMESTAMP_NTZ(9),
	AUD_LAST_UPDT_BATCH_NBR NUMBER(38,0),
	constraint CUSTOMER_SAT_PK primary key (EFF_FROM_DTTM, C_CUSTKEY_HASH)
);

--initial Load into SAT Table 
INSERT INTO DATA_VAULT_PERFORMANCE_TESTING.DV.CUSTOMER_SAT_BINARY (
C_CUSTKEY_HASH,C_CUSTKEY,EFF_FROM_DTTM,EFF_THRU_DTTM,C_NAME,C_ADDRESS,C_NATIONKEY,C_PHONE,C_ACCTBAL,C_MKTSEGMENT,
C_COMMENT,AUD_CHKSUM,AUD_CURR_FLG,AUD_DEL_FLG,AUD_INS_DTTM,AUD_INS_BATCH_NBR,AUD_LAST_UPDT_DTTM,AUD_LAST_UPDT_BATCH_NBR)
select * from 
(
SELECT IFF(NULLIF(CAST(C_CUSTKEY AS VARCHAR),'') IS NULL,'-1',MD5(CAST(C_CUSTKEY AS VARCHAR))) AS  C_CUSTKEY_HASH,
md5_binary(C_CUSTKEY) C_CUSTKEY,CURRENT_TIMESTAMP AS EFF_FROM_DTTM,'2099-12-31 00:00:00.000 -0000 ' AS EFF_THRU_DTTM,
C_NAME,C_ADDRESS,C_NATIONKEY,C_PHONE,C_ACCTBAL,C_MKTSEGMENT,C_COMMENT,
MD5(c_name || c_address || c_nationkey || c_phone || c_acctbal || c_mktsegment || c_comment) as AUD_CHKSUM,
'Y' AS AUD_CURR_FLG,
'N' AS AUD_DEL_FLG,
CURRENT_TIMESTAMP AS AUD_INS_DTTM,
'1001' AS AUD_INS_BATCH_NBR,
CURRENT_TIMESTAMP AS AUD_LAST_UPDT_DTTM,
'1000' AS AUD_LAST_UPDT_BATCH_NBR
FROM DATA_VAULT_PERFORMANCE_TESTING.RAW.CUSTOMER
)

--Base View for Customer Dimension from HUB and SAT

CREATE OR REPLACE VIEW DATA_VAULT_PERFORMANCE_TESTING.BV.V_CUSTOMER_DIM_BINARY AS 
(select 
HUB.C_CUSTKEY_HASH,HUB.C_CUSTKEY,SAT.C_NAME,SAT.C_ADDRESS,SAT.C_NATIONKEY,SAT.C_PHONE,SAT.C_ACCTBAL,SAT.C_MKTSEGMENT,
SAT.C_COMMENT
FROM DV.CUSTOMER_HUB_BINARY HUB
INNER JOIN DV.CUSTOMER_SAT_BINARY SAT 
on SAT.C_CUSTKEY =  HUB.C_CUSTKEY 
AND SAT.AUD_CURR_FLG = 'Y' AND SAT.AUD_DEL_FLG = 'N');

SELECT * FROM DATA_VAULT_PERFORMANCE_TESTING.BV.V_CUSTOMER_DIM_BINARY;

-------- ORDERS --------------

Orders HUB Table:

create or replace TABLE DATA_VAULT_PERFORMANCE_TESTING.DV.ORDERS_HUB_BINARY(
	O_ORDERKEY_HASH VARCHAR(16777216) NOT NULL,
	O_ORDERKEY BINARY NOT NULL,
	SRC_SYS_KEY VARCHAR(16777216) NOT NULL,
	AUD_INS_DTTM TIMESTAMP_NTZ(9),
	AUD_INS_BATCH_NBR NUMBER(38,0),
	constraint ORDERS_HUB_PK primary key (O_ORDERKEY_HASH)
);


Initial Load into HUB Table:
INSERT INTO DATA_VAULT_PERFORMANCE_TESTING.DV.ORDERS_HUB_BINARY (O_ORDERKEY_HASH,O_ORDERKEY,SRC_SYS_KEY,AUD_INS_DTTM,AUD_INS_BATCH_NBR)
select * from 
(
SELECT IFF(NULLIF(CAST(O_ORDERKEY AS VARCHAR),'') IS NULL,'-1',MD5(CAST(O_ORDERKEY AS VARCHAR))) AS  O_ORDERKEY_HASH,
MD5_BINARY(O_ORDERKEY) O_ORDERKEY,'TEST' SRC_SYS_KEY,CURRENT_TIMESTAMP AS AUD_INS_DTTM,1001 as AUD_INS_BATCH_NBR
FROM DATA_VAULT_PERFORMANCE_TESTING.RAW.ORDERS
) s
WHERE 
NOT EXISTS 
	(SELECT * FROM DATA_VAULT_PERFORMANCE_TESTING.DV.ORDERS_HUB_BINARY hub
	 WHERE hub.O_ORDERKEY_HASH = s.O_ORDERKEY_HASH
     );

orders SAT Table:    

create or replace TABLE DATA_VAULT_PERFORMANCE_TESTING.DV.ORDERS_SAT_BINARY (
	O_ORDERKEY_HASH VARCHAR(16777216) NOT NULL,
	O_ORDERKEY BINARY NOT NULL,
	EFF_FROM_DTTM TIMESTAMP_NTZ(9) NOT NULL,
	EFF_THRU_DTTM TIMESTAMP_NTZ(9),
	O_CUSTKEY NUMBER(38,0),
	O_ORDERSTATUS VARCHAR(1),
	O_TOTALPRICE NUMBER(12,2),
	O_ORDERDATE DATE,
	O_ORDERPRIORITY VARCHAR(15),
	O_CLERK VARCHAR(15),
	O_SHIPPRIORITY NUMBER(38,0),
	O_COMMENT VARCHAR(79),
	AUD_CHKSUM VARCHAR(16777216) NOT NULL,
	AUD_CURR_FLG VARCHAR(1) NOT NULL,
	AUD_DEL_FLG VARCHAR(1) NOT NULL,
	AUD_INS_DTTM TIMESTAMP_NTZ(9),
	AUD_INS_BATCH_NBR NUMBER(38,0),
	AUD_LAST_UPDT_DTTM TIMESTAMP_NTZ(9),
	AUD_LAST_UPDT_BATCH_NBR NUMBER(38,0),
	constraint ORDERS_SAT_PK primary key (EFF_FROM_DTTM,O_ORDERKEY_HASH)
);

--Initial Load for SAT Table
INSERT INTO DATA_VAULT_PERFORMANCE_TESTING.DV.ORDERS_SAT_BINARY
(
O_ORDERKEY_HASH,O_ORDERKEY,EFF_FROM_DTTM,EFF_THRU_DTTM,O_CUSTKEY,O_ORDERSTATUS,O_TOTALPRICE,O_ORDERDATE,
O_ORDERPRIORITY,O_CLERK,O_SHIPPRIORITY,O_COMMENT,AUD_CHKSUM,AUD_CURR_FLG,AUD_DEL_FLG,AUD_INS_DTTM,AUD_INS_BATCH_NBR,
AUD_LAST_UPDT_DTTM,AUD_LAST_UPDT_BATCH_NBR
)
select * from 
(
SELECT IFF(NULLIF(CAST(O_ORDERKEY AS VARCHAR),'') IS NULL,'-1',MD5(CAST(O_ORDERKEY AS VARCHAR))) AS  O_ORDERKEY_HASH,
MD5_BINARY(O_ORDERKEY) O_ORDERKEY,CURRENT_TIMESTAMP AS EFF_FROM_DTTM,'2099-12-31 00:00:00.000 -0000 ' AS EFF_THRU_DTTM,
O_CUSTKEY,O_ORDERSTATUS,O_TOTALPRICE,O_ORDERDATE,O_ORDERPRIORITY,O_CLERK,O_SHIPPRIORITY,O_COMMENT,
MD5(O_CUSTKEY || O_ORDERSTATUS || O_TOTALPRICE || O_ORDERDATE || O_ORDERPRIORITY || O_CLERK || O_SHIPPRIORITY || O_COMMENT) as AUD_CHKSUM,
'Y' AS AUD_CURR_FLG,
'N' AS AUD_DEL_FLG,
CURRENT_TIMESTAMP AS AUD_INS_DTTM,
'1001' AS AUD_INS_BATCH_NBR,
CURRENT_TIMESTAMP AS AUD_LAST_UPDT_DTTM,
'1000' AS AUD_LAST_UPDT_BATCH_NBR
FROM DATA_VAULT_PERFORMANCE_TESTING.RAW.ORDERS
);


--Base view for orders on top of HUB and SAT Tables :

CREATE OR REPLACE VIEW DATA_VAULT_PERFORMANCE_TESTING.BV.V_ORDERS_DIM_BINARY AS 
(
SELECT
HUB.O_ORDERKEY_HASH,HUB.O_ORDERKEY,SAT.O_CUSTKEY,SAT.O_ORDERSTATUS,SAT.O_TOTALPRICE,SAT.O_ORDERDATE,
SAT.O_ORDERPRIORITY,SAT.O_CLERK,SAT.O_SHIPPRIORITY,SAT.O_COMMENT
FROM DV.ORDERS_HUB_BINARY HUB
INNER JOIN DV.ORDERS_SAT_BINARY SAT 
on SAT.O_ORDERKEY =  HUB.O_ORDERKEY
AND SAT.AUD_CURR_FLG = 'Y' AND SAT.AUD_DEL_FLG = 'N'
);


-----------------------------------------------------------------------
Link between Customers and Orders:

create or replace TABLE DATA_VAULT_PERFORMANCE_TESTING.DV.CUST_ORDERS_LNK_BINARY  (
	CUST_ORDERS_LNK_KEY_HASH VARCHAR(16777216) NOT NULL,
	CUST_ORDERS_LNK_KEY BINARY NOT NULL,
	SRC_SYS_KEY VARCHAR(16777216) NOT NULL,
	AUD_INS_DTTM TIMESTAMP_NTZ(9),
	AUD_INS_BATCH_NBR NUMBER(38,0),
    O_CUSTKEY_HASH  VARCHAR(16777216) NOT NULL,
	O_ORDERKEY_HASH VARCHAR(16777216) NOT NULL,
	O_CUSTKEY  BINARY NOT NULL, 
	O_ORDERKEY BINARY NOT NULL, 
	constraint CUST_ORDERS_LNK_PK primary key (CUST_ORDERS_LNK_KEY_HASH),
	constraint CUST_ORDERS_LNK_KEY_CUSTOMER_HUB_FK foreign key (O_CUSTKEY_HASH) references DATA_VAULT_PERFORMANCE_TESTING.DV.CUSTOMER_HUB(C_CUSTKEY_HASH),
	constraint CUST_ORDERS_LNK_KEY_ORDERS_HUB_FK foreign key (O_ORDERKEY_HASH) references DATA_VAULT_PERFORMANCE_TESTING.DV.ORDERS_HUB(O_ORDERKEY_HASH)
);

Initial lOad into Link Table:

INSERT INTO DATA_VAULT_PERFORMANCE_TESTING.DV.CUST_ORDERS_LNK_BINARY
(CUST_ORDERS_LNK_KEY_HASH,CUST_ORDERS_LNK_KEY,SRC_SYS_KEY,AUD_INS_DTTM,AUD_INS_BATCH_NBR,
O_CUSTKEY_HASH,O_ORDERKEY_HASH,O_CUSTKEY,O_ORDERKEY)
select * from 
(
SELECT 
CONCAT(IFF(NULLIF(CAST(O_ORDERKEY AS VARCHAR),'') IS NULL,'-1',MD5(CAST(O_ORDERKEY AS VARCHAR))),
IFF(NULLIF(CAST(O_CUSTKEY AS VARCHAR),'') IS NULL,'-1',MD5(CAST(O_CUSTKEY AS VARCHAR)))) AS  CUST_ORDERS_LNK_KEY_HASH,
MD5_BINARY(TO_NUMBER(CONCAT(CAST( O_ORDERKEY AS VARCHAR),CAST(O_CUSTKEY AS VARCHAR)))) CUST_ORDERS_LNK_KEY,'TEST' SRC_SYS_KEY,
CURRENT_TIMESTAMP AS AUD_INS_DTTM,1001 as AUD_INS_BATCH_NBR,
IFF(NULLIF(CAST(O_CUSTKEY AS VARCHAR),'') IS NULL,'-1',MD5(CAST(O_CUSTKEY AS VARCHAR))) AS O_CUSTKEY_HASH,
IFF(NULLIF(CAST(O_ORDERKEY AS VARCHAR),'') IS NULL,'-1',MD5(CAST(O_ORDERKEY AS VARCHAR))) AS O_ORDERKEY_HASH,
MD5_BINARY(O_CUSTKEY) O_CUSTKEY,
MD5_BINARY(O_ORDERKEY) O_ORDERKEY
FROM DATA_VAULT_PERFORMANCE_TESTING.RAW.ORDERS
) s
WHERE 
NOT EXISTS 
	(SELECT * FROM DATA_VAULT_PERFORMANCE_TESTING.DV.CUST_ORDERS_LNK_BINARY  LNK
	 WHERE LNK.CUST_ORDERS_LNK_KEY_HASH = s.CUST_ORDERS_LNK_KEY_HASH
     );


Base view for Customer orders:
	 
CREATE OR REPLACE VIEW DATA_VAULT_PERFORMANCE_TESTING.BV.V_CUST_ORDERS_FACT_BINARY AS 
(
SELECT
HUB.O_ORDERKEY_HASH,HUB.O_ORDERKEY,SAT.O_CUSTKEY,SAT.O_ORDERSTATUS,SAT.O_TOTALPRICE,SAT.O_ORDERDATE,
SAT.O_ORDERPRIORITY,SAT.O_CLERK,SAT.O_SHIPPRIORITY,SAT.O_COMMENT
FROM DV.ORDERS_HUB_BINARY HUB
INNER JOIN DV.ORDERS_SAT_BINARY SAT 
on SAT.O_ORDERKEY =  HUB.O_ORDERKEY
AND SAT.AUD_CURR_FLG = 'Y' AND SAT.AUD_DEL_FLG = 'N'
INNER JOIN DV.CUST_ORDERS_LNK_BINARY LNK
ON LNK.O_ORDERKEY = HUB.O_ORDERKEY
)
;


------------------------------------------------------------------------
DV Performance Test with Number Data type 
------------------------------------------------------------------------
HUB Table:
create or replace TABLE DATA_VAULT_PERFORMANCE_TESTING.DV.CUSTOMER_HUB_NUM(
	C_CUSTKEY_HASH VARCHAR(16777216) NOT NULL,
	C_CUSTKEY NUMBER(38,0) NOT NULL,
	SRC_SYS_KEY VARCHAR(16777216) NOT NULL,
	AUD_INS_DTTM TIMESTAMP_NTZ(9),
	AUD_INS_BATCH_NBR NUMBER(38,0),
	constraint CUSTOMER_HUB_PK primary key (C_CUSTKEY_HASH)
);

Initial Load:
INSERT INTO DATA_VAULT_PERFORMANCE_TESTING.DV.CUSTOMER_HUB_NUM (C_CUSTKEY_HASH,C_CUSTKEY,SRC_SYS_KEY,AUD_INS_DTTM,AUD_INS_BATCH_NBR)
select * from 
(
SELECT IFF(NULLIF(CAST(C_CUSTKEY AS VARCHAR),'') IS NULL,'-1',MD5(CAST(C_CUSTKEY AS VARCHAR))) AS  C_CUSTKEY_HASH,
C_CUSTKEY,'TEST' SRC_SYS_KEY,CURRENT_TIMESTAMP AS AUD_INS_DTTM,1001 as AUD_INS_BATCH_NBR
FROM DATA_VAULT_PERFORMANCE_TESTING.RAW.CUSTOMER
) s
WHERE 
NOT EXISTS 
	(SELECT * FROM DATA_VAULT_PERFORMANCE_TESTING.DV.CUSTOMER_HUB_NUM hub
	 WHERE hub.C_CUSTKEY_HASH = s.C_CUSTKEY_HASH
     );

SAT Table:
create or replace TABLE DATA_VAULT_PERFORMANCE_TESTING.DV.CUSTOMER_SAT_NUM (
	C_CUSTKEY_HASH VARCHAR(16777216) NOT NULL,
	C_CUSTKEY NUMBER(38,0) NOT NULL,
	EFF_FROM_DTTM TIMESTAMP_NTZ(9) NOT NULL,
	EFF_THRU_DTTM TIMESTAMP_NTZ(9),
	C_NAME VARCHAR(25),
	C_ADDRESS VARCHAR(40),
	C_NATIONKEY NUMBER(38,0),
	C_PHONE VARCHAR(15),
	C_ACCTBAL NUMBER(12,2),
	C_MKTSEGMENT VARCHAR(10),
	C_COMMENT VARCHAR(117),	
	AUD_CHKSUM VARCHAR(16777216) NOT NULL,
	AUD_CURR_FLG VARCHAR(1) NOT NULL,
	AUD_DEL_FLG VARCHAR(1) NOT NULL,
	AUD_INS_DTTM TIMESTAMP_NTZ(9),
	AUD_INS_BATCH_NBR NUMBER(38,0),
	AUD_LAST_UPDT_DTTM TIMESTAMP_NTZ(9),
	AUD_LAST_UPDT_BATCH_NBR NUMBER(38,0),
	constraint CUSTOMER_SAT_PK primary key (EFF_FROM_DTTM, C_CUSTKEY_HASH)
);

	
Initial Load:
INSERT INTO DATA_VAULT_PERFORMANCE_TESTING.DV.CUSTOMER_SAT_NUM (
C_CUSTKEY_HASH,C_CUSTKEY,EFF_FROM_DTTM,EFF_THRU_DTTM,C_NAME,C_ADDRESS,C_NATIONKEY,C_PHONE,C_ACCTBAL,C_MKTSEGMENT,
C_COMMENT,AUD_CHKSUM,AUD_CURR_FLG,AUD_DEL_FLG,AUD_INS_DTTM,AUD_INS_BATCH_NBR,AUD_LAST_UPDT_DTTM,AUD_LAST_UPDT_BATCH_NBR)
select * from 
(
SELECT IFF(NULLIF(CAST(C_CUSTKEY AS VARCHAR),'') IS NULL,'-1',MD5(CAST(C_CUSTKEY AS VARCHAR))) AS  C_CUSTKEY_HASH,
C_CUSTKEY,CURRENT_TIMESTAMP AS EFF_FROM_DTTM,'2099-12-31 00:00:00.000 -0000 ' AS EFF_THRU_DTTM,
C_NAME,C_ADDRESS,C_NATIONKEY,C_PHONE,C_ACCTBAL,C_MKTSEGMENT,C_COMMENT,
MD5(c_name || c_address || c_nationkey || c_phone || c_acctbal || c_mktsegment || c_comment) as AUD_CHKSUM,
'Y' AS AUD_CURR_FLG,
'N' AS AUD_DEL_FLG,
CURRENT_TIMESTAMP AS AUD_INS_DTTM,
'1001' AS AUD_INS_BATCH_NBR,
CURRENT_TIMESTAMP AS AUD_LAST_UPDT_DTTM,
'1000' AS AUD_LAST_UPDT_BATCH_NBR
FROM DATA_VAULT_PERFORMANCE_TESTING.RAW.CUSTOMER
)

--Base View of Customer:

CREATE OR REPLACE VIEW DATA_VAULT_PERFORMANCE_TESTING.BV.V_CUSTOMER_DIM_NUM AS 
(select 
HUB.C_CUSTKEY_HASH,HUB.C_CUSTKEY,SAT.C_NAME,SAT.C_ADDRESS,SAT.C_NATIONKEY,SAT.C_PHONE,SAT.C_ACCTBAL,SAT.C_MKTSEGMENT,
SAT.C_COMMENT
FROM DV.CUSTOMER_HUB_NUM HUB
INNER JOIN DV.CUSTOMER_SAT_NUM SAT 
on SAT.C_CUSTKEY_HASH =  HUB.C_CUSTKEY_HASH 
AND SAT.AUD_CURR_FLG = 'Y' AND SAT.AUD_DEL_FLG = 'N');


SELECT * FROM DATA_VAULT_PERFORMANCE_TESTING.BV.V_CUSTOMER_DIM_NUM;

Orders:

HUB Table:
create or replace TABLE DATA_VAULT_PERFORMANCE_TESTING.DV.ORDERS_HUB_NUM(
	O_ORDERKEY_HASH VARCHAR(16777216) NOT NULL,
	O_ORDERKEY NUMBER(38,0) NOT NULL,
	SRC_SYS_KEY VARCHAR(16777216) NOT NULL,
	AUD_INS_DTTM TIMESTAMP_NTZ(9),
	AUD_INS_BATCH_NBR NUMBER(38,0),
	constraint ORDERS_HUB_PK primary key (O_ORDERKEY_HASH)
);

Initial Load:
INSERT INTO DATA_VAULT_PERFORMANCE_TESTING.DV.ORDERS_HUB_NUM (O_ORDERKEY_HASH,O_ORDERKEY,SRC_SYS_KEY,AUD_INS_DTTM,AUD_INS_BATCH_NBR)
select * from 
(
SELECT IFF(NULLIF(CAST(O_ORDERKEY AS VARCHAR),'') IS NULL,'-1',MD5(CAST(O_ORDERKEY AS VARCHAR))) AS  O_ORDERKEY_HASH,
O_ORDERKEY,'TEST' SRC_SYS_KEY,CURRENT_TIMESTAMP AS AUD_INS_DTTM,1001 as AUD_INS_BATCH_NBR
FROM DATA_VAULT_PERFORMANCE_TESTING.RAW.ORDERS
) s
WHERE 
NOT EXISTS 
	(SELECT * FROM DATA_VAULT_PERFORMANCE_TESTING.DV.ORDERS_HUB_NUM hub
	 WHERE hub.O_ORDERKEY_HASH = s.O_ORDERKEY_HASH
     );

SAT Table:  

create or replace TABLE DATA_VAULT_PERFORMANCE_TESTING.DV.ORDERS_SAT_NUM (
	O_ORDERKEY_HASH VARCHAR(16777216) NOT NULL,
	O_ORDERKEY NUMBER(38,0) NOT NULL,
	EFF_FROM_DTTM TIMESTAMP_NTZ(9) NOT NULL,
	EFF_THRU_DTTM TIMESTAMP_NTZ(9),
	O_CUSTKEY NUMBER(38,0),
	O_ORDERSTATUS VARCHAR(1),
	O_TOTALPRICE NUMBER(12,2),
	O_ORDERDATE DATE,
	O_ORDERPRIORITY VARCHAR(15),
	O_CLERK VARCHAR(15),
	O_SHIPPRIORITY NUMBER(38,0),
	O_COMMENT VARCHAR(79),
	AUD_CHKSUM VARCHAR(16777216) NOT NULL,
	AUD_CURR_FLG VARCHAR(1) NOT NULL,
	AUD_DEL_FLG VARCHAR(1) NOT NULL,
	AUD_INS_DTTM TIMESTAMP_NTZ(9),
	AUD_INS_BATCH_NBR NUMBER(38,0),
	AUD_LAST_UPDT_DTTM TIMESTAMP_NTZ(9),
	AUD_LAST_UPDT_BATCH_NBR NUMBER(38,0),
	constraint ORDERS_SAT_PK primary key (EFF_FROM_DTTM,O_ORDERKEY_HASH)
);

Initial Load:
INSERT INTO DATA_VAULT_PERFORMANCE_TESTING.DV.ORDERS_SAT_NUM 
(
O_ORDERKEY_HASH,O_ORDERKEY,EFF_FROM_DTTM,EFF_THRU_DTTM,O_CUSTKEY,O_ORDERSTATUS,O_TOTALPRICE,O_ORDERDATE,
O_ORDERPRIORITY,O_CLERK,O_SHIPPRIORITY,O_COMMENT,AUD_CHKSUM,AUD_CURR_FLG,AUD_DEL_FLG,AUD_INS_DTTM,AUD_INS_BATCH_NBR,
AUD_LAST_UPDT_DTTM,AUD_LAST_UPDT_BATCH_NBR
)
select * from 
(
SELECT IFF(NULLIF(CAST(O_ORDERKEY AS VARCHAR),'') IS NULL,'-1',MD5(CAST(O_ORDERKEY AS VARCHAR))) AS  O_ORDERKEY_HASH,
O_ORDERKEY,CURRENT_TIMESTAMP AS EFF_FROM_DTTM,'2099-12-31 00:00:00.000 -0000 ' AS EFF_THRU_DTTM,
O_CUSTKEY,O_ORDERSTATUS,O_TOTALPRICE,O_ORDERDATE,O_ORDERPRIORITY,O_CLERK,O_SHIPPRIORITY,O_COMMENT,
MD5(O_CUSTKEY || O_ORDERSTATUS || O_TOTALPRICE || O_ORDERDATE || O_ORDERPRIORITY || O_CLERK || O_SHIPPRIORITY || O_COMMENT) as AUD_CHKSUM,
'Y' AS AUD_CURR_FLG,
'N' AS AUD_DEL_FLG,
CURRENT_TIMESTAMP AS AUD_INS_DTTM,
'1001' AS AUD_INS_BATCH_NBR,
CURRENT_TIMESTAMP AS AUD_LAST_UPDT_DTTM,
'1000' AS AUD_LAST_UPDT_BATCH_NBR
FROM DATA_VAULT_PERFORMANCE_TESTING.RAW.ORDERS
);

Base View of orders:
CREATE OR REPLACE VIEW DATA_VAULT_PERFORMANCE_TESTING.BV.V_ORDERS_DIM_NUM AS 
(
SELECT
HUB.O_ORDERKEY_HASH,HUB.O_ORDERKEY,SAT.O_CUSTKEY,SAT.O_ORDERSTATUS,SAT.O_TOTALPRICE,SAT.O_ORDERDATE,
SAT.O_ORDERPRIORITY,SAT.O_CLERK,SAT.O_SHIPPRIORITY,SAT.O_COMMENT
FROM DV.ORDERS_HUB_NUM HUB
INNER JOIN DV.ORDERS_SAT_NUM SAT 
on SAT.O_ORDERKEY =  HUB.O_ORDERKEY
AND SAT.AUD_CURR_FLG = 'Y' AND SAT.AUD_DEL_FLG = 'N'
);

Link Between customers and Orders:

create or replace TABLE DATA_VAULT_PERFORMANCE_TESTING.DV.CUST_ORDERS_LNK_NUM  (
	CUST_ORDERS_LNK_KEY_HASH VARCHAR(16777216) NOT NULL,
	CUST_ORDERS_LNK_KEY NUMBER(38,0) NOT NULL,
	SRC_SYS_KEY VARCHAR(16777216) NOT NULL,
	AUD_INS_DTTM TIMESTAMP_NTZ(9),
	AUD_INS_BATCH_NBR NUMBER(38,0),
    O_CUSTKEY_HASH  VARCHAR(16777216) NOT NULL,
	O_ORDERKEY_HASH VARCHAR(16777216) NOT NULL,
	O_CUSTKEY  NUMBER(38,0) NOT NULL, 
	O_ORDERKEY NUMBER(38,0) NOT NULL, 
	constraint CUST_ORDERS_LNK_PK primary key (CUST_ORDERS_LNK_KEY_HASH),
	constraint CUST_ORDERS_LNK_KEY_CUSTOMER_HUB_FK foreign key (O_CUSTKEY_HASH) references DATA_VAULT_PERFORMANCE_TESTING.DV.CUSTOMER_HUB(C_CUSTKEY_HASH),
	constraint CUST_ORDERS_LNK_KEY_ORDERS_HUB_FK foreign key (O_ORDERKEY_HASH) references DATA_VAULT_PERFORMANCE_TESTING.DV.ORDERS_HUB(O_ORDERKEY_HASH)
);

INitial Load:
INSERT INTO DATA_VAULT_PERFORMANCE_TESTING.DV.CUST_ORDERS_LNK_NUM
(CUST_ORDERS_LNK_KEY_HASH,CUST_ORDERS_LNK_KEY,SRC_SYS_KEY,AUD_INS_DTTM,AUD_INS_BATCH_NBR,
O_CUSTKEY_HASH,O_ORDERKEY_HASH,O_CUSTKEY,O_ORDERKEY)
select * from 
(
SELECT 
CONCAT(IFF(NULLIF(CAST(O_ORDERKEY AS VARCHAR),'') IS NULL,'-1',MD5(CAST(O_ORDERKEY AS VARCHAR))),
IFF(NULLIF(CAST(O_CUSTKEY AS VARCHAR),'') IS NULL,'-1',MD5(CAST(O_CUSTKEY AS VARCHAR)))) AS  CUST_ORDERS_LNK_KEY_HASH,
TO_NUMBER(CONCAT(CAST( O_ORDERKEY AS VARCHAR),CAST(O_CUSTKEY AS VARCHAR))) CUST_ORDERS_LNK_KEY,'TEST' SRC_SYS_KEY,
CURRENT_TIMESTAMP AS AUD_INS_DTTM,1001 as AUD_INS_BATCH_NBR,
IFF(NULLIF(CAST(O_CUSTKEY AS VARCHAR),'') IS NULL,'-1',MD5(CAST(O_CUSTKEY AS VARCHAR))) AS O_CUSTKEY_HASH,
IFF(NULLIF(CAST(O_ORDERKEY AS VARCHAR),'') IS NULL,'-1',MD5(CAST(O_ORDERKEY AS VARCHAR))) AS O_ORDERKEY_HASH,
O_CUSTKEY,
O_ORDERKEY
FROM DATA_VAULT_PERFORMANCE_TESTING.RAW.ORDERS
) s
WHERE 
NOT EXISTS 
	(SELECT * FROM DATA_VAULT_PERFORMANCE_TESTING.DV.CUST_ORDERS_LNK_NUM  LNK
	 WHERE LNK.CUST_ORDERS_LNK_KEY_HASH = s.CUST_ORDERS_LNK_KEY_HASH
     );
     
Base View :	 
CREATE OR REPLACE VIEW DATA_VAULT_PERFORMANCE_TESTING.BV.V_CUST_ORDERS_FACT_NUM AS 
(
SELECT
HUB.O_ORDERKEY_HASH,HUB.O_ORDERKEY,SAT.O_CUSTKEY,SAT.O_ORDERSTATUS,SAT.O_TOTALPRICE,SAT.O_ORDERDATE,
SAT.O_ORDERPRIORITY,SAT.O_CLERK,SAT.O_SHIPPRIORITY,SAT.O_COMMENT
FROM DV.ORDERS_HUB_NUM HUB
INNER JOIN DV.ORDERS_SAT_NUM SAT 
on SAT.O_ORDERKEY =  HUB.O_ORDERKEY
AND SAT.AUD_CURR_FLG = 'Y' AND SAT.AUD_DEL_FLG = 'N'
INNER JOIN DV.CUST_ORDERS_LNK_NUM LNK
ON LNK.O_ORDERKEY = HUB.O_ORDERKEY
)
;    


Performance Test:

ALTER SESSION SET USE_CACHED_RESULT=FALSE;

--15m and 22 sec - 120 ms (cache)
select * from DATA_VAULT_PERFORMANCE_TESTING.BV.V_CUSTOMER_DIM_HASH;
--15m and 20 sec - 75ms (cache)
select * from DATA_VAULT_PERFORMANCE_TESTING.BV.V_CUSTOMER_DIM;
--15M and 21 Sec
SELECT * FROM DATA_VAULT_PERFORMANCE_TESTING.BV.V_CUSTOMER_DIM_NUM;
--15M and 22 SEC
SELECT * FROM DATA_VAULT_PERFORMANCE_TESTING.BV.V_CUSTOMER_DIM_BINARY;

--150M AND 3 Min 2 Sec
select * from DATA_VAULT_PERFORMANCE_TESTING.BV.V_ORDERS_DIM_HASH;
--150M and 2 min 45 sec
select * from DATA_VAULT_PERFORMANCE_TESTING.BV.V_ORDERS_DIM;
--150M and 2 min 32 sec
select * from DATA_VAULT_PERFORMANCE_TESTING.BV.V_ORDERS_DIM_NUM;
--150M and 2 MIN 54 SEC 
select * from DATA_VAULT_PERFORMANCE_TESTING.BV.V_ORDERS_DIM_BINARY;

--150M 3 Min 21 sec 
select * from DATA_VAULT_PERFORMANCE_TESTING.BV.V_CUST_ORDERS_FACT_HASH;
--150m and 3 min 4 sec
select * from DATA_VAULT_PERFORMANCE_TESTING.BV.V_CUST_ORDERS_FACT;
--150M and 2 min 58 sec
select * from DATA_VAULT_PERFORMANCE_TESTING.BV.V_CUST_ORDERS_FACT_NUM;
--150M and 3min 16 sec
select * from DATA_VAULT_PERFORMANCE_TESTING.BV.V_CUST_ORDERS_FACT_BINARY;

3 min 53 sec
select * from DATA_VAULT_PERFORMANCE_TESTING.BV.V_CUST_ORDERS_FACT_DIRECT ;

